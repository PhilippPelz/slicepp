#line 2 "/space/projects/slicepp/doxygen/build/generated_src/pyscanner.cpp"

#line 4 "/space/projects/slicepp/doxygen/build/generated_src/pyscanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pyscannerYY_create_buffer
#define yy_delete_buffer pyscannerYY_delete_buffer
#define yy_flex_debug pyscannerYY_flex_debug
#define yy_init_buffer pyscannerYY_init_buffer
#define yy_flush_buffer pyscannerYY_flush_buffer
#define yy_load_buffer_state pyscannerYY_load_buffer_state
#define yy_switch_to_buffer pyscannerYY_switch_to_buffer
#define yyin pyscannerYYin
#define yyleng pyscannerYYleng
#define yylex pyscannerYYlex
#define yylineno pyscannerYYlineno
#define yyout pyscannerYYout
#define yyrestart pyscannerYYrestart
#define yytext pyscannerYYtext
#define yywrap pyscannerYYwrap
#define yyalloc pyscannerYYalloc
#define yyrealloc pyscannerYYrealloc
#define yyfree pyscannerYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pyscannerYYrestart(pyscannerYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int pyscannerYYleng;

extern FILE *pyscannerYYin, *pyscannerYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscannerYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pyscannerYYrestart()), so that the user can continue scanning by
	 * just pointing pyscannerYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pyscannerYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int pyscannerYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pyscannerYYwrap()'s to do buffer switches
 * instead of setting up a fresh pyscannerYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pyscannerYYrestart (FILE *input_file  );
void pyscannerYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pyscannerYY_create_buffer (FILE *file,int size  );
void pyscannerYY_delete_buffer (YY_BUFFER_STATE b  );
void pyscannerYY_flush_buffer (YY_BUFFER_STATE b  );
void pyscannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pyscannerYYpop_buffer_state (void );

static void pyscannerYYensure_buffer_stack (void );
static void pyscannerYY_load_buffer_state (void );
static void pyscannerYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pyscannerYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pyscannerYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pyscannerYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pyscannerYY_scan_bytes (yyconst char *bytes,int len  );

void *pyscannerYYalloc (yy_size_t  );
void *pyscannerYYrealloc (void *,yy_size_t  );
void pyscannerYYfree (void *  );

#define yy_new_buffer pyscannerYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pyscannerYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pyscannerYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscannerYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pyscannerYYin = (FILE *) 0, *pyscannerYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pyscannerYYlineno;

int pyscannerYYlineno = 1;

extern char *pyscannerYYtext;
#define yytext_ptr pyscannerYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pyscannerYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pyscannerYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 157
#define YY_END_OF_BUFFER 158
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[776] =
    {   0,
    16483,16483,  101,  101,   26,   26,   32,   32,   37,   37,
      158,  156,  157,  155,  157,   21,  156,  157,   17,  155,
      157,   12,   21,  156,  157,   21,  156,  157,   11,   21,
      156,  157,   21,  156,  157,   15,   21,  156,  157,   15,
       21,  156,  157,   15,   21,  156,  157,   15,   21,  156,
      157,   15,   21,  156,  157,   16,   21,  156,  157,   15,
       21,  156,  157,16393,16394,   15,   21,  156,  157,16393,
    16394,   15,   21,  156,  157,16393,16394,   15,   21,  156,
      157,16393,16394,   15,   21,  156,  157,16393,16394,   48,
       49,  156,  157,   46,  155,  157,   45,   49,  156,  157,

       49,  156,  157,   44,   49,  156,  157,   49,  156,  157,
       47,   49,  156,  157,   47,   49,  156,  157,   47,   48,
       49,  156,  157,  129,  132,  156,  157,  132,  156,  157,
      130,  155,  157,  132,  156,  157,  132,  156,  157,  132,
      156,  157,  128,  132,  156,  157,  135,  137,  156,  157,
      136,  155,  157,  137,  156,  157,  135,  137,  156,  157,
      133,  137,  156,  157,  156,  157,   66,  156,  157,   65,
      156,  157,   64,  156,  157,   73,  156,  157,   67,  156,
      157,   73,  156,  157,   70,  156,  157,   67,   73,  156,
      157,   71,  156,  157,   69,   73,  156,  157,   68,   73,

      156,  157,   56,   60,  156,  157,   60,  156,  157,   59,
      155,  157,16434,   55,   60,  156,  157,   58,   60,  156,
      157,   54,   60,  156,  157,   53,   60,  156,  157,   58,
       60,  156,  157,   77,  156,  157,   78,  155,  157,   74,
       77,  156,  157,   76,   77,  156,  157,   75,   77,  156,
      157,   91,  156,  157,   92,  156,  157,   92,  156,  157,
       93,  156,  157,   94,  156,  157,  156,  157,   95,  155,
      157, 8291,  156,  157,  156,  157,  156,  157,   98,  156,
      157,   85,   88,  156,  157,   88,  156,  157,   86,  155,
      157,   84,   88,  156,  157,   88,  156,  157,   83,   88,

      156,  157,   82,   88,  156,  157,  113,  156,  157,  101,
      113,  156,  157,  114,  155,  157,  105,  113,  156,  157,
      111,  113,  156,  157,  104,  113,  156,  157,  108,  113,
      156,  157,  102,  113,  156,  157,  102,  113,  156,  157,
      100,  113,  156,  157,  112,  113,  156,  157,  112,  113,
      156,  157,  112,  113,  156,  157,  109,  113,  156,  157,
      112,  113,  156,  157,  110,  113,  156,  157,  125,  156,
      157,  124,  155,  157,  122,  156,  157,  123,  155,  157,
      120,  122,  156,  157,  119,  122,  156,  157,  115,  122,
      156,  157,  116,  122,  156,  157,  121,  122,  156,  157,

      142,  143,  156,  157,  143,  156,  157,  141,  143,  156,
      157,  143,  156,  157,  148,  149,  156,  157,  147,  149,
      156,  157,  149,  156,  157,  149,  156,  157,  152,  154,
      156,  157,  152,  153,  155,  157,  152,  154,  156,  157,
      152,  154,  156,  157,  154,  156,  157,   27,  156,  157,
       26,   27,  156,  157,   25,  155,  157,   22,   27,  156,
      157,   23,   27,  156,  157,   23,   27,  156,  157,   34,
      156,  157,   32,   34,  156,  157,   31,  155,  157,   28,
       34,  156,  157,   33,   34,  156,  157,   30,   34,  156,
      157,16413,   38,  156,  157,   37,   38,  156,  157,   36,

      155,  157,   35,   38,  156,  157,   17,   14,   15,   15,
       15,   15,   15,   16,16393,16394,16393,16394,16393,16394,
    16393,16394,16393,16394,   15,16393,16394,   15,16393,16394,
       15,16393,16394,   15,16393,16394,   15,16393,16394,   48,
       43,   47,   47,   47,   48,  129,  131,  128,  135,  134,
      135,  133,  133,   66,   65,   64,   67,   72,   71,   68,
       56,16434,   58,   58,   53,   52,   57,   58,   91,   92,
       94,   95,   98,   85,   87,   82,   81,  101,  111,  102,
      102,  102,  112,  105,  104,  112,  121,  142,  139,  139,
      138,  148,  145,  145,  144,  152,  152,  152,   26,   23,

       23,   32, 8221,   30,16413,   37,   35,   18,   14,   20,
       19,   15,   15,   15,   15,16393,16394,16393,16394,16393,
    16394,16393,16394,16393,16394, 8202, 8202, 8202,   15,16393,
    16394,   15,16393,16394,   15,16393,16394,   15,16393,16394,
       40,   43,   42,   41,   47,  126,  127,   72,   51, 8242,
       61,   58,   63,   63,   62,   57,   58,   94,   96,   97,
       79,   89,   87,   90,  106,  107,  103,  102,  102,  117,
      118,  140,  146,  150,  151,   23,   23, 8221,   35,   18,
       19,   15,    2,   15,   15,16393,16394,16393,16394,16393,
    16394,16393,16394,   15,16393,16394,    1,    2,   15,16393,

    16394,   15,16393,16394,   40,   41,   47,  126,  127,   61,
       62,   94,   96,   97,   80,   89,   90,  106,  107,  103,
      102,  117,  118,  150,  151,   23,   23,   35,   15,    6,
       15,16393,16394,    1,16393,16394,16393,16394,   15,16393,
    16394,    5,    6,   15,16393,16394,  103,   23,    4,   15,
    16393,16394,    5,16393,16394,    3,    4,   15,16393,16394,
    16423,   23,   24,    8,    3,16393,16394,    7,    8,16423,
     8231,   24,    7, 8201,   13
    } ;

static yyconst flex_int16_t yy_accept[464] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
       19,   22,   26,   29,   33,   36,   40,   44,   48,   52,
       56,   60,   66,   72,   78,   84,   90,   94,   97,  101,
      104,  108,  111,  115,  119,  124,  128,  131,  134,  137,
      140,  143,  147,  151,  154,  157,  161,  165,  167,  170,
      173,  176,  179,  182,  185,  188,  192,  195,  199,  203,

      207,  210,  214,  218,  222,  226,  230,  234,  237,  240,
      244,  248,  252,  255,  258,  261,  264,  267,  269,  272,
      275,  277,  279,  282,  286,  289,  292,  296,  299,  303,
      307,  310,  314,  317,  321,  325,  329,  333,  337,  341,
      345,  349,  353,  357,  361,  365,  369,  372,  375,  378,
      381,  385,  389,  393,  397,  401,  405,  408,  412,  415,
      419,  423,  426,  429,  433,  437,  441,  445,  448,  451,
      455,  458,  462,  466,  470,  473,  477,  480,  484,  488,
      493,  496,  500,  503,  507,  508,  508,  509,  509,  509,
      509,  510,  511,  512,  513,  514,  515,  517,  519,  521,

      523,  525,  525,  528,  528,  531,  534,  537,  540,  541,
      541,  542,  542,  542,  543,  544,  546,  547,  547,  547,
      548,  549,  550,  550,  551,  552,  553,  554,  554,  555,
      556,  557,  558,  559,  560,  561,  562,  563,  563,  563,
      563,  564,  565,  565,  566,  567,  569,  570,  571,  571,
      572,  572,  573,  573,  573,  574,  575,  575,  575,  575,
      576,  576,  577,  578,  579,  579,  580,  580,  580,  581,
      582,  583,  583,  584,  585,  586,  587,  587,  587,  588,
      589,  589,  590,  591,  592,  593,  593,  594,  595,  596,
      597,  597,  598,  599,  600,  600,  600,  601,  602,  603,

      603,  604,  606,  607,  607,  607,  608,  609,  610,  611,
      612,  612,  613,  614,  615,  616,  618,  620,  622,  624,
      626,  627,  628,  629,  632,  635,  638,  641,  642,  643,
      644,  645,  646,  647,  648,  649,  650,  651,  651,  652,
      654,  655,  656,  658,  659,  660,  661,  661,  662,  662,
      663,  664,  665,  666,  667,  668,  669,  670,  671,  672,
      673,  673,  674,  674,  675,  676,  676,  677,  678,  679,
      679,  680,  681,  682,  682,  683,  684,  685,  686,  688,
      690,  692,  694,  694,  694,  694,  697,  699,  702,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,

      716,  717,  718,  719,  720,  720,  721,  722,  723,  724,
      725,  726,  727,  728,  729,  729,  730,  731,  732,  734,
      735,  737,  739,  739,  742,  744,  747,  747,  747,  748,
      749,  749,  750,  751,  753,  754,  756,  756,  758,  761,
      762,  764,  764,  765,  766,  768,  768,  770,  770,  771,
      772,  773,  773,  774,  774,  774,  774,  774,  775,  775,
      775,  776,  776
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
       19,    7,    1,   20,   21,   21,   21,   21,   22,   21,
       23,   23,   23,   24,   23,   25,   23,   23,   23,   23,
       23,   26,   23,   23,   27,   23,   23,   28,   23,   23,
       29,   30,   31,    1,   32,    7,   33,   21,   34,   35,

       36,   37,   23,   38,   39,   24,   23,   40,   41,   23,
       42,   43,   23,   44,   45,   46,   47,   23,   23,   28,
       48,   23,   49,    7,   31,    7,    1,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    1,
        1,    1,    6,    7,    8,    8,    8,    1,    9,    1,
       10,   10,   11,   11,   11,   11,   11,   11,    1,   12,
        1,   11,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    1,   13
    } ;

static yyconst flex_int16_t yy_base[542] =
    {   0,
     1657, 1654,    0,   50,  100,    0, 1652, 1651,  149,  153,
      156,  161,  183,    0,  233,    0,  163,  282,  288,  290,
      303,    0,  353,    0,  403,  411,  170,  419,  431,    0,
     1650, 1649,  481,    0,  529,  530,  536,  537,  543,  544,
      574,    0,  624,    0,  674,    0, 1651, 1936, 1936, 1936,
     1636, 1623, 1607, 1598, 1551,    0, 1551, 1554, 1545, 1547,
      723,  151,  724,  534,  725,  726,    0, 1936, 1582, 1571,
     1554, 1936,    0, 1522,  769,    0, 1936, 1936, 1550, 1544,
        0, 1549,    0,  424, 1936,  548, 1544,  553, 1936, 1936,
        0, 1936, 1547,    0, 1936, 1936, 1544, 1936,    0,    0,

     1936,  555, 1538, 1535, 1531,  178, 1532, 1936, 1936, 1936,
     1936, 1936,    0, 1535, 1936, 1936, 1520,  292, 1936, 1936,
     1526, 1520,  407,    0, 1936, 1521, 1521,    0, 1517,  415,
     1936, 1512, 1936, 1491,    0, 1480, 1936,  806,  715, 1936,
        0,  281,  728, 1936,  730, 1936, 1936, 1936, 1936, 1936,
     1482, 1462, 1936, 1936,    0,    0, 1457, 1936,  426,    0,
     1936, 1453,  561, 1427, 1424, 1446, 1440,  743, 1936, 1434,
     1936, 1936,  554,  751, 1936, 1423, 1936, 1936, 1936,  556,
     1936, 1421, 1936,  735, 1416, 1411,    0,    0, 1407, 1368,
        0, 1380, 1366, 1360, 1358,  773,  740,  764,  775,  794,

      795,  807,  813,  748,  814,  822,  823,  825,    0, 1395,
        0,    0, 1389,    0, 1354,    0,    0, 1385, 1379, 1936,
     1373,    0,  799, 1936,  800, 1356, 1352,  843, 1936, 1936,
        0, 1353,    0, 1352,    0,    0,  833, 1347, 1350, 1345,
        0,  787, 1341,  826, 1936,    0,    0, 1339,    0, 1325,
      846, 1936, 1333, 1329,  848,    0, 1330, 1331, 1325,    0,
     1312,  851, 1936, 1316, 1309,    0, 1303,  840,  855,  859,
     1936,    0,    0, 1936, 1936,  832, 1296, 1291,    0,    0,
     1281, 1936,  860, 1936,    0, 1274, 1936,  864, 1936, 1244,
      882, 1268, 1264, 1267,  875, 1264,  879,  880, 1252,  739,

     1247,  884, 1246,  886, 1243,  889, 1239,    0, 1936, 1238,
     1208, 1192, 1230, 1190, 1188,  841,  894,  896,  890,  899,
     1936,  815, 1185,  900,  902,  903,  905, 1224,    0, 1936,
     1221, 1185, 1217, 1216,    0, 1936, 1217, 1216, 1213,    0,
     1936, 1212,    0, 1199, 1206, 1194,    0, 1049, 1048, 1045,
        0, 1044, 1043, 1042,  913, 1936,  885, 1041, 1040, 1936,
      909, 1936,  914, 1039, 1038, 1039,  906,  912, 1037, 1033,
      929, 1936, 1936,  978,  977, 1018, 1011,  931,  932,  934,
      937,  938,  936,  918,  913,  939,  944,  946,  948, 1936,
     1936,  892, 1936, 1936, 1936, 1936,  864, 1936, 1936, 1936,

     1936, 1936, 1936, 1936,  954, 1936, 1936, 1936, 1936, 1936,
     1936,  950,  958,  959,  825,  801,  793,  722,  966,  957,
      972,  979,  720,  980,  981,  984,    0,  972,  980,  991,
      727,  745,  732,  988,  999, 1006,  536, 1007, 1008, 1010,
      992,  524,  541, 1012, 1013,  376, 1014, 1015, 1017, 1936,
     1026,  379, 1019,  361,  256,  244,  144, 1936,  132,  125,
     1936, 1936, 1052, 1065, 1078, 1091, 1104, 1117, 1130, 1143,
     1156, 1169, 1182, 1195, 1201, 1213, 1225, 1238, 1251, 1257,
     1270, 1283, 1296, 1302, 1315, 1321, 1334, 1346, 1359, 1372,
     1378, 1385, 1398, 1407, 1420, 1433, 1439, 1445, 1458, 1471,

     1484, 1497, 1510, 1522, 1534, 1546, 1559, 1572, 1584, 1597,
     1610, 1623, 1636, 1648, 1661, 1674, 1680, 1684, 1691, 1704,
     1716, 1729, 1742, 1748, 1751, 1757, 1770, 1783, 1795, 1807,
     1819, 1831, 1843, 1856, 1862, 1869, 1882, 1894, 1906, 1910,
     1922
    } ;

static yyconst flex_int16_t yy_def[542] =
    {   0,
      463,  463,  462,  462,  462,    5,  463,  463,  464,  464,
      465,  465,  462,   13,  462,   15,  466,  466,  467,  467,
      462,   21,  462,   23,  468,  468,  469,  469,  462,   29,
      470,  470,  462,   33,  471,  471,  472,  472,  473,  473,
      462,   41,  462,   43,  462,   45,  462,  462,  462,  462,
      462,  462,  474,  462,  462,  475,  475,  475,  475,  475,
      476,  477,  477,  477,  477,  477,  478,  462,  462,  479,
      462,  462,  480,  480,  480,  481,  462,  462,  462,  462,
      482,  462,  483,  462,  462,  483,  462,  462,  462,  462,
      484,  462,  462,  485,  462,  462,  462,  462,  486,  487,

      462,  488,  462,  489,  462,  462,  490,  462,  462,  462,
      462,  462,  491,  462,  462,  462,  492,  462,  462,  462,
      462,  462,  462,  493,  462,  494,  462,  495,  462,  462,
      462,  462,  462,  462,  496,  462,  462,  462,  462,  462,
      497,  497,  497,  462,  497,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  498,  499,  462,  462,  500,  501,
      462,  462,  502,  503,  503,  462,  462,  503,  462,  462,
      462,  462,  504,  504,  462,  462,  462,  462,  462,  505,
      462,  462,  462,  506,  462,  462,  507,  508,  462,  462,
      475,  475,  475,  475,  475,  476,  509,  509,  509,  509,

      509,  462,  477,  510,  477,  477,  477,  477,  478,  462,
      511,  512,  462,  480,  480,   75,  481,  462,  462,  462,
      462,  483,  462,  462,  483,  462,  462,  462,  462,  462,
      484,  462,  513,  462,  486,  487,  488,  462,  514,  462,
      489,  515,  462,  462,  462,  516,  517,  462,  518,  519,
      462,  462,  462,  462,  462,  520,  462,  521,  462,  522,
      462,  462,  462,  462,  462,  523,  462,  462,  462,  462,
      462,  524,  525,  462,  462,  525,  462,  462,  526,  527,
      462,  462,  462,  462,  528,  462,  462,  462,  462,  503,
      503,  462,  462,  462,  462,  529,  530,  530,  462,  462,

      462,  531,  462,  462,  532,  533,  462,  534,  462,  462,
      462,  535,  535,  535,  535,  509,  509,  509,  509,  509,
      462,  462,  462,  477,  477,  477,  477,  462,  511,  462,
      462,  480,  462,  462,  513,  462,  462,  514,  462,  489,
      462,  462,  516,  536,  462,  462,  537,  462,  521,  462,
      522,  462,  462,  462,  462,  462,  524,  462,  462,  462,
      462,  462,  462,  462,  462,  529,  538,  530,  462,  532,
      539,  462,  462,  462,  535,  462,  535,  535,  509,  509,
      509,  509,  462,  462,  462,  477,  462,  477,  477,  462,
      462,  480,  462,  462,  462,  462,  536,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  538,  530,  539,  462,  535,  462,  535,  509,  462,
      509,  509,  462,  477,  462,  477,  540,  462,  462,  530,
      462,  462,  535,  509,  462,  509,  462,  462,  477,  541,
      530,  462,  462,  462,  509,  462,  462,  462,  541,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,    0,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462
    } ;

static yyconst flex_int16_t yy_nxt[1987] =
    {   0,
       50,   50,   51,   50,   52,   53,   50,   54,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   55,
       56,   56,   56,   56,   56,   56,   56,   56,   50,   50,
       50,   56,   56,   57,   58,   56,   59,   56,   60,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   50,   56,
       50,   61,   51,   50,   52,   53,   50,   54,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   55,
       62,   62,   62,   62,   62,   62,   62,   62,   50,   50,
       50,   62,   62,   63,   64,   62,   65,   62,   66,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   50,   62,

       67,   67,   68,   67,   69,   70,   67,   71,   67,   67,
       67,   67,   67,   72,   67,   67,   67,   67,   67,   67,
       73,   73,   73,   73,   73,   73,   73,   73,   67,   67,
       67,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   74,   73,   73,   73,   67,   75,
       77,   78,  202,   79,   82,   78,   80,   79,   84,  461,
       80,   85,   86,   84,  101,  102,   87,  103,  104,  204,
      105,  125,  126,  460,  127,  128,  101,  129,   81,  244,
      245,  459,   81,   48,   88,   49,   48,   48,   48,   48,
       48,   89,   48,   48,   48,   48,   48,   48,   48,   48,

       90,   48,   48,   91,   91,   91,   91,   91,   91,   91,
       91,   48,   48,   48,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   48,   91,   92,   93,   49,   92,   92,   94,   92,
       92,   48,   95,   92,   92,   96,   92,   92,   92,   92,
       97,   98,   92,   99,   99,   99,   99,   99,   99,   99,
       99,   92,   92,   92,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   92,   99,  106,  102,  274,  103,  107,  275,  105,
      109,  458,  109,  251,  252,  101,  110,  111,  110,  111,

      112,  457,  112,   48,   48,   49,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,  113,  113,  113,  113,  113,  113,  113,
      113,   48,   48,   48,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,   48,  113,   48,  114,   49,   48,   48,   48,   48,
       48,  115,  115,   48,   48,  115,   48,   48,   48,   48,
      116,   48,   48,  117,  117,  117,  117,  117,  117,  117,
      117,   48,   48,   48,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,   48,  117,   48,  118,  119,  456,  121,  255,  252,
      122,   48,  123,  119,  455,  121,  262,  263,  122,  454,
      130,  126,   48,  127,  128,  223,  129,  283,  284,  224,
       48,  131,  132,  133,  131,  134,  135,  131,  136,  137,
      131,  131,  131,  131,  131,  138,  139,  139,  131,  140,
      131,  141,  141,  141,  141,  141,  142,  143,  141,  144,
      131,  131,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  142,  141,  141,  145,  141,  146,
      141,  149,  149,  150,  149,  151,  149,  149,  152,  153,
      154,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  155,  155,  155,  155,  155,  155,  155,  155,  153,
      149,  154,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  153,
      155,   49,   49,  157,  157,  202,  158,  158,   49,   49,
      161,  161,  443,  162,  162,  165,  165,  166,  166,  225,
      167,  167,  204,  226,  228,  295,  237,  300,  159,  159,
      238,  229,  288,  289,  452,  163,  163,  296,  301,  206,
      230,  446,  168,  168,  169,  170,  171,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  172,  169,  169,
      169,  169,  169,  169,  173,  173,  173,  173,  173,  173,

      173,  173,  169,  169,  169,  173,  173,  173,  173,  173,
      173,  173,  174,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  169,  173,  175,  176,  177,  175,  175,  175,
      175,  175,  175,  175,  178,  175,  179,  175,  175,  175,
      175,  175,  175,  175,  180,  180,  180,  180,  180,  180,
      180,  180,  175,  175,  175,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  175,  180,  181,  182,  183,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  184,  184,  184,  184,  184,  184,

      184,  184,  181,  181,  181,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  181,  184,  196,  202,  202,  202,  268,  270,
      270,  270,  274,  443,  274,  275,  304,  275,  271,  271,
      300,  202,  204,  204,  204,  462,  432,  290,  305,  322,
      290,  301,  295,  276,  271,  276,  198,  199,  204,  200,
      442,  201,  437,  205,  296,  202,  208,  433,  207,  209,
      209,  276,  209,  276,  196,  209,  202,  209,  209,  209,
      209,  209,  204,  216,  216,  216,  209,  209,  209,  341,
      323,  298,  241,  204,  417,  202,  202,  209,  209,  209,

      223,  225,  432,  317,  224,  226,  198,  199,  202,  200,
      318,  201,  204,  204,  202,  202,  383,  209,  216,  268,
      269,  269,  270,  202,  202,  204,  202,  244,  245,  271,
      271,  204,  204,  272,  237,  320,  274,  319,  238,  275,
      204,  204,  202,  204,  228,  271,  324,  251,  252,  255,
      252,  229,  262,  263,  355,  355,  355,  384,  325,  204,
      230,  361,  284,  431,  326,  363,  289,  327,  268,  269,
      269,  270,  268,  270,  270,  270,  295,  249,  271,  356,
      295,  295,  271,  271,  462,  300,  290,  304,  296,  290,
      304,  202,  296,  296,  356,  202,  301,  202,  271,  305,

      202,  202,  305,  387,  202,  427,  202,  295,  204,  407,
      361,  284,  204,  295,  204,  363,  289,  204,  204,  296,
      204,  204,  368,  204,  407,  296,  379,  355,  355,  355,
      304,  381,  380,  202,  405,  420,  406,  383,  202,  202,
      202,  382,  305,  388,  386,  387,  389,  425,  405,  202,
      204,  295,  204,  413,  423,  204,  204,  204,  420,  295,
      304,  385,  204,  296,  204,  428,  204,  202,  429,  429,
      429,  296,  305,  435,  418,  204,  419,  421,  384,  422,
      202,  438,  425,  424,  204,  202,  429,  429,  429,  444,
      204,  426,  295,  451,  429,  429,  429,  204,  204,  204,

      435,  430,  204,  406,  296,  296,  204,  202,  438,  447,
      434,  448,  417,  444,  453,  447,  448,  204,  448,  376,
      453,  416,  436,  415,  204,  204,  204,  451,  450,  439,
      204,  204,  204,  450,  370,  450,  441,  204,  369,  296,
      366,  411,  410,  409,  408,  404,  403,  402,  401,  348,
      348,  445,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  187,  187,  399,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  191,  398,
      191,  191,  249,  191,  197,  396,  395,  337,  337,  394,
      393,  392,  197,  197,  391,  197,  203,  390,  385,  378,
      377,  376,  203,  203,  203,  203,  375,  203,  209,  209,
      374,  373,  372,  209,  370,  209,  209,  303,  369,  209,
      209,  211,  211,  299,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  214,  366,  214,  214,  294,  214,
      217,  365,  364,  291,  217,  217,  217,  217,  217,  217,
      217,  362,  217,  220,  220,  360,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  222,  222,  359,  222,

      358,  222,  222,  222,  222,  222,  222,  222,  222,  231,
      354,  231,  231,  353,  231,  233,  233,  264,  233,  352,
      233,  233,  233,  233,  233,  233,  233,  233,  235,  350,
      235,  235,  348,  235,  236,  347,  346,  345,  249,  236,
      248,  236,  236,  236,  236,  236,  236,  239,  342,  339,
      239,  337,  336,  234,  232,  239,  239,  227,  239,  241,
      241,  227,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  246,  246,  221,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  247,  334,  247,  247,  333,
      247,  250,  250,  332,  250,  250,  331,  250,  256,  328,

      315,  314,  313,  256,  256,  256,  256,  256,  256,  256,
      256,  258,  312,  311,  310,  307,  258,  258,  185,  258,
      260,  260,  303,  260,  299,  260,  260,  260,  260,  260,
      260,  260,  260,  266,  266,  294,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  273,  293,  273,  273,
      292,  273,  279,  291,  279,  279,  291,  279,  280,  280,
      286,  281,  280,  280,  280,  280,  280,  280,  280,  278,
      280,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  285,  285,  277,  267,  285,  285,
      285,  285,  285,  285,  285,  265,  285,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      290,  290,  290,  264,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  297,  261,  259,  257,  254,  297,  297,
      253,  297,  297,  249,  297,  302,  248,  242,  243,  302,
      242,  302,  240,  302,  302,  234,  302,  306,  232,  227,
      221,  219,  306,  306,  218,  306,  306,  215,  306,  308,
      308,  213,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  309,  309,  309,  309,  212,  309,  309,  309,
      309,  309,  309,  309,  309,  316,  210,  195,  194,  193,
      192,  316,  316,  316,  316,  190,  316,  321,  321,  321,

      321,  321,  321,  321,  321,  189,  321,  321,  321,  321,
      329,  329,  188,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  330,  330,  330,  330,  186,  330,  330,
      330,  330,  330,  330,  330,  330,  335,  335,  185,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  338,
      462,  148,  148,   49,   49,  338,   49,  338,  338,   49,
      338,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  343,  343,  462,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  247,  462,  247,
      247,  462,  247,  344,  344,  462,  344,  250,  250,  462,

      250,  250,  462,  250,  256,  462,  462,  462,  462,  256,
      256,  256,  256,  256,  256,  256,  256,  349,  462,  462,
      462,  462,  462,  349,  462,  349,  349,  462,  349,  351,
      351,  462,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  266,  266,  462,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  357,  462,  357,  273,  462,
      273,  273,  462,  273,  279,  462,  279,  279,  462,  279,
      280,  280,  462,  462,  280,  280,  280,  280,  280,  280,
      280,  462,  280,  285,  285,  462,  462,  285,  285,  285,
      285,  285,  285,  285,  462,  285,  367,  462,  462,  462,

      462,  462,  462,  462,  367,  367,  462,  367,  297,  462,
      462,  462,  462,  297,  297,  462,  297,  297,  462,  297,
      302,  462,  462,  462,  302,  462,  302,  462,  302,  302,
      462,  302,  371,  462,  462,  462,  462,  462,  462,  462,
      371,  371,  462,  371,  306,  462,  462,  462,  462,  306,
      306,  462,  306,  306,  462,  306,  308,  308,  462,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  191,
      462,  191,  191,  462,  191,  397,  397,  462,  397,  397,
      462,  397,  400,  400,  400,  400,  462,  400,  400,  400,
      400,  400,  400,  400,  400,  412,  462,  462,  462,  462,

      412,  412,  462,  412,  412,  462,  412,  414,  462,  462,
      462,  462,  414,  414,  462,  414,  414,  462,  414,  440,
      440,  462,  440,  449,  462,  462,  462,  462,  462,  449,
      449,  449,  449,  462,  449,   47,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462
    } ;

static yyconst flex_int16_t yy_chk[1987] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        9,    9,   62,    9,   10,   10,    9,   10,   11,  460,
       10,   11,   12,   12,   17,   17,   12,   17,   17,   62,
       17,   27,   27,  459,   27,   27,   17,   27,    9,  106,
      106,  457,   10,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   18,   18,  142,   18,   18,  142,   18,
       19,  456,   20,  118,  118,   18,   19,   19,   20,   20,

       19,  455,   20,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   25,   25,   25,  454,   25,  123,  123,
       25,   26,   26,   26,  452,   26,  130,  130,   26,  446,
       28,   28,   25,   28,   28,   84,   28,  159,  159,   84,
       26,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   35,   36,   35,   36,   64,   35,   36,   37,   38,
       37,   38,  443,   37,   38,   39,   40,   39,   40,   86,
       39,   40,   64,   86,   88,  173,  102,  180,   35,   36,
      102,   88,  163,  163,  442,   37,   38,  173,  180,   64,
       88,  437,   39,   40,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   61,   63,   65,   66,  139,  139,
      139,  139,  143,  433,  145,  143,  184,  145,  139,  139,
      300,  197,   63,   65,   66,  168,  432,  168,  184,  204,
      168,  300,  174,  143,  139,  145,   61,   61,  197,   61,
      431,   61,  423,   63,  174,  198,   66,  418,   65,   75,
       75,  143,   75,  145,  196,   75,  199,   75,   75,   75,
       75,   75,  198,   75,   75,   75,   75,   75,   75,  242,
      204,  174,  242,  199,  417,  200,  201,   75,   75,   75,

      223,  225,  416,  198,  223,  225,  196,  196,  202,  196,
      199,  196,  200,  201,  203,  205,  322,   75,   75,  138,
      138,  138,  138,  206,  207,  202,  208,  244,  244,  138,
      138,  203,  205,  138,  237,  201,  276,  200,  237,  276,
      206,  207,  316,  208,  228,  138,  205,  251,  251,  255,
      255,  228,  262,  262,  268,  268,  268,  322,  206,  316,
      228,  283,  283,  415,  207,  288,  288,  208,  269,  269,
      269,  269,  270,  270,  270,  270,  295,  397,  269,  269,
      297,  298,  270,  270,  291,  302,  291,  304,  295,  291,
      306,  319,  297,  298,  269,  317,  302,  318,  270,  304,

      320,  324,  306,  325,  326,  392,  327,  367,  319,  357,
      361,  361,  317,  368,  318,  363,  363,  320,  324,  367,
      325,  326,  298,  327,  357,  368,  317,  355,  355,  355,
      371,  319,  318,  379,  355,  380,  355,  383,  381,  382,
      386,  320,  371,  326,  324,  387,  327,  388,  355,  389,
      379,  412,  380,  368,  385,  381,  382,  386,  420,  413,
      414,  384,  387,  412,  388,  405,  389,  419,  405,  405,
      405,  413,  414,  421,  378,  420,  379,  381,  383,  382,
      422,  424,  425,  386,  419,  426,  428,  428,  428,  434,
      421,  389,  430,  441,  429,  429,  429,  422,  424,  425,

      435,  413,  426,  429,  430,  441,  434,  436,  438,  439,
      419,  440,  377,  444,  445,  447,  448,  435,  449,  376,
      453,  375,  422,  374,  436,  438,  439,  451,  440,  426,
      444,  445,  447,  448,  370,  449,  430,  453,  369,  451,
      366,  365,  364,  359,  358,  354,  353,  352,  350,  349,
      348,  436,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  466,  466,  466,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  474,  474,  346,  474,  474,

      474,  474,  474,  474,  474,  474,  474,  474,  475,  345,
      475,  475,  344,  475,  476,  342,  339,  338,  337,  334,
      333,  332,  476,  476,  331,  476,  477,  328,  323,  315,
      314,  313,  477,  477,  477,  477,  312,  477,  478,  478,
      311,  310,  307,  478,  305,  478,  478,  303,  301,  478,
      478,  479,  479,  299,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  480,  296,  480,  480,  294,  480,
      481,  293,  292,  290,  481,  481,  481,  481,  481,  481,
      481,  286,  481,  482,  482,  281,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  483,  483,  278,  483,

      277,  483,  483,  483,  483,  483,  483,  483,  483,  484,
      267,  484,  484,  265,  484,  485,  485,  264,  485,  261,
      485,  485,  485,  485,  485,  485,  485,  485,  486,  259,
      486,  486,  258,  486,  487,  257,  254,  253,  250,  487,
      248,  487,  487,  487,  487,  487,  487,  488,  243,  240,
      488,  239,  238,  234,  232,  488,  488,  227,  488,  489,
      489,  226,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  490,  490,  221,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  491,  219,  491,  491,  218,
      491,  492,  492,  215,  492,  492,  213,  492,  493,  210,

      195,  194,  193,  493,  493,  493,  493,  493,  493,  493,
      493,  494,  192,  190,  189,  186,  494,  494,  185,  494,
      495,  495,  182,  495,  176,  495,  495,  495,  495,  495,
      495,  495,  495,  496,  496,  170,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  497,  167,  497,  497,
      166,  497,  498,  165,  498,  498,  164,  498,  499,  499,
      162,  157,  499,  499,  499,  499,  499,  499,  499,  152,
      499,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  501,  501,  151,  136,  501,  501,
      501,  501,  501,  501,  501,  134,  501,  502,  502,  502,

      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      503,  503,  503,  132,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  504,  129,  127,  126,  122,  504,  504,
      121,  504,  504,  117,  504,  505,  114,  107,  105,  505,
      104,  505,  103,  505,  505,   97,  505,  506,   93,   87,
       82,   80,  506,  506,   79,  506,  506,   74,  506,  507,
      507,   71,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  508,  508,  508,  508,   70,  508,  508,  508,
      508,  508,  508,  508,  508,  509,   69,   60,   59,   58,
       57,  509,  509,  509,  509,   55,  509,  510,  510,  510,

      510,  510,  510,  510,  510,   54,  510,  510,  510,  510,
      511,  511,   53,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  512,  512,  512,  512,   52,  512,  512,
      512,  512,  512,  512,  512,  512,  513,  513,   51,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  514,
       47,   32,   31,    8,    7,  514,    2,  514,  514,    1,
      514,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  516,  516,    0,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  517,    0,  517,
      517,    0,  517,  518,  518,    0,  518,  519,  519,    0,

      519,  519,    0,  519,  520,    0,    0,    0,    0,  520,
      520,  520,  520,  520,  520,  520,  520,  521,    0,    0,
        0,    0,    0,  521,    0,  521,  521,    0,  521,  522,
      522,    0,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  523,  523,    0,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  524,    0,  524,  525,    0,
      525,  525,    0,  525,  526,    0,  526,  526,    0,  526,
      527,  527,    0,    0,  527,  527,  527,  527,  527,  527,
      527,    0,  527,  528,  528,    0,    0,  528,  528,  528,
      528,  528,  528,  528,    0,  528,  529,    0,    0,    0,

        0,    0,    0,    0,  529,  529,    0,  529,  530,    0,
        0,    0,    0,  530,  530,    0,  530,  530,    0,  530,
      531,    0,    0,    0,  531,    0,  531,    0,  531,  531,
        0,  531,  532,    0,    0,    0,    0,    0,    0,    0,
      532,  532,    0,  532,  533,    0,    0,    0,    0,  533,
      533,    0,  533,  533,    0,  533,  534,  534,    0,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  535,
        0,  535,  535,    0,  535,  536,  536,    0,  536,  536,
        0,  536,  537,  537,  537,  537,    0,  537,  537,  537,
      537,  537,  537,  537,  537,  538,    0,    0,    0,    0,

      538,  538,    0,  538,  538,    0,  538,  539,    0,    0,
        0,    0,  539,  539,    0,  539,  539,    0,  539,  540,
      540,    0,  540,  541,    0,    0,    0,    0,    0,  541,
      541,  541,  541,    0,  541,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462
    } ;

extern int pyscannerYY_flex_debug;
int pyscannerYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pyscannerYYtext;
#line 1 "pyscanner.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */
#line 26 "pyscanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <qfile.h>
#include <qfileinfo.h>
  
#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "pycode.h"
#include "arguments.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

/* -----------------------------------------------------------------
 *
 *	statics
 */

  
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;

static Protection	protection;

static Entry*		current_root = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		bodyEntry    = 0 ;
static int		yyLineNr     = 1 ;
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static Specifier 	virt;

static int              docBlockContext;
static QCString         docBlock;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;
static bool             docBrief;
static bool             docBlockSpecial;

static bool             g_doubleQuote;
static bool             g_specialBlock;
static int              g_stringContext;
static QGString *       g_copyString;
static int              g_indent = 0;
static int              g_curIndent = 0;

static QDict<QCString>  g_packageNameCache(257);

static char             g_atomStart;
static char             g_atomEnd;
static int              g_atomCount;

//static bool             g_insideConstructor;

static QCString         g_moduleScope;
static QCString         g_packageName;

//static bool             g_hideClassDocs;

static QCString         g_defVal;
static int              g_braceCount;

static bool             g_lexInit = FALSE;
static bool             g_packageCommentAllowed;

//-----------------------------------------------------------------------------


static void initParser()
{
  protection = Public;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  previous = 0;
  g_packageCommentAllowed = TRUE;
  g_packageNameCache.setAutoDelete(TRUE);
}

static void initEntry()
{
  //current->python = TRUE;
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = SrcLangExt_Python; 
  current->setParent(current_root);
  initGroupInfo(current);
  gstat = FALSE;
}

static void newEntry()
{
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry ;
  initEntry();
}

static void newVariable()
{
  if (!current->name.isEmpty() && current->name.at(0)=='_') // mark as private
  {
    current->protection=Private;
  }
  if (current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    current->stat = TRUE;
  }
  newEntry();
}

static void newFunction()
{
  if (current->name.left(2)=="__" && current->name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    current->protection=Public;
  }
  else if (current->name.at(0)=='_')
  {
    current->protection=Private;
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(const QCString &path)
{
  QCString *pScope = g_packageNameCache.find(path);
  if (pScope)
  {
    return *pScope;
  }
  QFileInfo pf(path+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(path.left(i));
      if (!scope.isEmpty())
      {
	scope+="::";
      }
      scope+=path.mid(i+1);
      g_packageNameCache.insert(path,new QCString(scope));
      return scope;
    }
  }
  return "";
}
  
static QCString findPackageScope(const char *fileName)
{
  if (fileName==0) return "";
  QFileInfo fi(fileName);
  return findPackageScopeFromPath(fi.dirPath(TRUE).data());
}

//-----------------------------------------------------------------------------

static void lineCount()
{
  DBG_CTX((stderr,"yyLineNr=%d\n",yyLineNr));
  for (const char *p = pyscannerYYtext; *p; ++p)
  {
    yyLineNr += (*p == '\n') ;
  }
}

static void incLineNr()
{
  DBG_CTX((stderr,"yyLineNr=%d\n",yyLineNr));
  yyLineNr++;
}

#if 0
// Appends the current-name to current-type;
// Destroys current-name.
// Destroys current->args and current->argList
static void addType( Entry* current )
{
    uint tl=current->type.length();
    if ( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if ( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}

static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}
#endif
//-----------------------------------------------------------------

//-----------------------------------------------------------------
static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}

/*
static void appendDocBlock() {
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry;
  initEntry();
}
*/

static void handleCommentBlock(const QCString &doc,bool brief)
{
  //printf("handleCommentBlock(doc=[%s] brief=%d docBlockInBody=%d docBlockJavaStyle=%d\n",
  //    doc.data(),brief,docBlockInBody,docBlockJavaStyle);

  // TODO: Fix me
  docBlockInBody=FALSE;
  
  if (docBlockInBody && previous && !previous->doc.isEmpty())
  {
    previous->doc=previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry;
  int lineNr = brief ? current->briefLine : current->docLine;
  while (parseCommentBlock(
	g_thisParser,
	(docBlockInBody && previous) ? previous : current,
	doc,     // text
	yyFileName, // file
	lineNr,
	docBlockInBody ? FALSE : brief, 
    docBlockJavaStyle, // javadoc style // or FALSE,
	docBlockInBody,
	protection,
        position,
        needsEntry)
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry();
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

}

static void endOfDef(int correction=0)
{
  //printf("endOfDef at=%d\n",yyLineNr);
  if (bodyEntry)
  {
    bodyEntry->endBodyLine  = yyLineNr-correction;
    bodyEntry = 0;
  }
  newEntry();
  //g_insideConstructor = FALSE;
}

static inline void addToString(const char *s)
{
  if (g_copyString) (*g_copyString)+=s;
}

static void initTriDoubleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscannerYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = TRUE;
  startCommentBlock(FALSE);
}

static void initTriSingleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscannerYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = FALSE;
  startCommentBlock(FALSE);
}

static void initSpecialBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBrief = TRUE;
  docBlock.resize(0);
  startCommentBlock(TRUE);
}

static void searchFoundDef()
{
  current->fileName  = yyFileName;
  current->startLine = yyLineNr;
  current->bodyLine  = yyLineNr;
  current->section = Entry::FUNCTION_SEC;
  current->protection = protection = Public;
  current->lang = SrcLangExt_Python;
  current->virt = Normal;
  current->stat = gstat;
  current->mtype = mtype = Method;
  current->type.resize(0);
  current->name.resize(0);
  current->args.resize(0);
  current->argList->clear();
  g_packageCommentAllowed = FALSE;
  gstat=FALSE;
  //printf("searchFoundDef at=%d\n",yyLineNr);
}

static void searchFoundClass()
{
  current->section = Entry::CLASS_SEC;
  current->argList->clear();
  current->type += "class" ;
  current->fileName  = yyFileName;
  current->startLine  = yyLineNr;
  current->bodyLine  = yyLineNr;
  g_packageCommentAllowed = FALSE;
}

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while ( c < max_size && inputString[inputPosition] )
  {
    *buf = inputString[inputPosition++] ;
    //printf("%d (%c)\n",*buf,*buf);
    c++; buf++;
  }
  return c;
}

/* start command character */
/* Main start state */


/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */



/* Function states */




/* Class states */




/* Variable states */



/* String states */



/* import */



#line 1660 "/space/projects/slicepp/doxygen/build/generated_src/pyscanner.cpp"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pyscannerYYlex_destroy (void );

int pyscannerYYget_debug (void );

void pyscannerYYset_debug (int debug_flag  );

YY_EXTRA_TYPE pyscannerYYget_extra (void );

void pyscannerYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pyscannerYYget_in (void );

void pyscannerYYset_in  (FILE * in_str  );

FILE *pyscannerYYget_out (void );

void pyscannerYYset_out  (FILE * out_str  );

int pyscannerYYget_leng (void );

char *pyscannerYYget_text (void );

int pyscannerYYget_lineno (void );

void pyscannerYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pyscannerYYwrap (void );
#else
extern int pyscannerYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pyscannerYYtext, pyscannerYYleng, 1, pyscannerYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pyscannerYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pyscannerYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pyscannerYYin))==0 && ferror(pyscannerYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pyscannerYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pyscannerYYlex (void);

#define YY_DECL int pyscannerYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pyscannerYYtext and pyscannerYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pyscannerYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pyscannerYYtext[pyscannerYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 534 "pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 1877 "/space/projects/slicepp/doxygen/build/generated_src/pyscanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)pyscannerYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pyscannerYYin )
			pyscannerYYin = stdin;

		if ( ! pyscannerYYout )
			pyscannerYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pyscannerYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE );
		}

		pyscannerYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pyscannerYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 463 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 462 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 540 "pyscanner.l"
{ // start of a function/method definition with indent
      			  DBG_CTX((stderr,"Found def at %d\n",yyLineNr));
      			  g_indent=computeIndent(pyscannerYYtext);
			  searchFoundDef();
			  BEGIN( FunctionDec );
      			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 546 "pyscanner.l"
{ // start of a function/method definition
			  searchFoundDef();
			  BEGIN( FunctionDec );
                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 551 "pyscanner.l"
{ // start of a class definition with indent
       			  DBG_CTX((stderr,"Found class at %d\n",yyLineNr));
      			  g_indent=computeIndent(pyscannerYYtext);
			  searchFoundClass();
			  BEGIN( ClassDec ) ;
       			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 557 "pyscanner.l"
{  // start of a class definition
			  searchFoundClass();
			  BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 5:
#line 562 "pyscanner.l"
case 6:
YY_RULE_SETUP
#line 562 "pyscanner.l"
{ // start of an from import
			  g_packageCommentAllowed = FALSE;
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 7:
#line 568 "pyscanner.l"
case 8:
YY_RULE_SETUP
#line 568 "pyscanner.l"
{ // start of an import statement
			  g_packageCommentAllowed = FALSE;
                          BEGIN( Import );
                       }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 572 "pyscanner.l"
{ // property
      			current->section   = Entry::VARIABLE_SEC;
  			current->mtype     = Property;
			current->name      = QCString(pyscannerYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
       	              }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 582 "pyscanner.l"
{ // variable
      			g_indent=computeIndent(pyscannerYYtext);
      			current->section   = Entry::VARIABLE_SEC;
			current->name      = QCString(pyscannerYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
      		      }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 592 "pyscanner.l"
{ // start of a single quoted string
       		        g_stringContext=YY_START;
		        g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 598 "pyscanner.l"
{ // start of a double quoted string
       	                g_stringContext=YY_START;
			g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 604 "pyscanner.l"
{
       			gstat=TRUE;
      		      }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 607 "pyscanner.l"
{ // normal comment 
			g_packageCommentAllowed = FALSE;
      		      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 610 "pyscanner.l"
{ // some other identifier
			g_packageCommentAllowed = FALSE;
		      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 613 "pyscanner.l"
{
      			g_curIndent=computeIndent(pyscannerYYtext);
                      }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 617 "pyscanner.l"
{ // new line
                        lineCount();
                      }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 621 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 626 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 20:
/* rule 20 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 631 "pyscanner.l"
{  // start of a special comment
      			g_curIndent=computeIndent(pyscannerYYtext);
			g_packageCommentAllowed = FALSE;
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 637 "pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK


case 22:
YY_RULE_SETUP
#line 645 "pyscanner.l"
{ // python3 style imports
                      }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 647 "pyscanner.l"
{ // from package import 
                        g_packageName=pyscannerYYtext;
		      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 650 "pyscanner.l"
{
    			BEGIN(FromModItem);
    		      }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 653 "pyscanner.l"
{
                        incLineNr();
                        BEGIN(Search);
                      }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 657 "pyscanner.l"
{
		      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 659 "pyscanner.l"
{
                        unput(*pyscannerYYtext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 28:
YY_RULE_SETUP
#line 666 "pyscanner.l"
{ // import all
                  QCString item=g_packageName;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using directive: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDIR_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
    		}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 677 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscannerYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 687 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscannerYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
		}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 698 "pyscanner.l"
{
                  incLineNr();
                  BEGIN(Search);
                }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 702 "pyscanner.l"
{
		}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 704 "pyscanner.l"
{ 
  		}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 706 "pyscanner.l"
{
                  unput(*pyscannerYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 713 "pyscanner.l"
{
			current->name=removeRedundantWhiteSpace(substitute(pyscannerYYtext,".","::"));
			current->fileName = yyFileName; 
			//printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
			current->section=Entry::USINGDECL_SEC;
			current_root->addSubEntry(current);
			current = new Entry ;
			initEntry();
			BEGIN(Search);
                      }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 723 "pyscanner.l"
{
                  incLineNr();
                  BEGIN(Search);
                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 727 "pyscanner.l"
{
		}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 729 "pyscanner.l"
{
                  unput(*pyscannerYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 39:
YY_RULE_SETUP
#line 736 "pyscanner.l"
{
                        DBG_CTX((stderr,"Found member variable %s in %s at %d\n",&pyscannerYYtext[5],current_root->name.data(),yyLineNr));
			current->name=&pyscannerYYtext[5];
			current->section=Entry::VARIABLE_SEC;
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			current->type.resize(0);
			if (current->name.at(0)=='_') // mark as private
			{
			  current->protection=Private;
			}
			else
			{
			  current->protection=Public;
			}
			newEntry();
                      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 754 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 759 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 42:
/* rule 42 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 764 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 768 "pyscanner.l"
{ // #
	              }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 770 "pyscanner.l"
{ // start of a single quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 775 "pyscanner.l"
{ // start of a double quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 780 "pyscanner.l"
{ incLineNr(); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 781 "pyscanner.l"
// identifiers
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 782 "pyscanner.l"
// other uninteresting stuff
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 783 "pyscanner.l"
// anything else
	YY_BREAK


case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 787 "pyscanner.l"
{
                        DBG_CTX((stderr,"indent %d<=%d\n",computeIndent(&pyscannerYYtext[1]),g_indent));
                        if (computeIndent(&pyscannerYYtext[1])<=g_indent) 
			{
			  int i;
			  for (i=(int)pyscannerYYleng-1;i>=0;i--)
			  {
			    unput(pyscannerYYtext[i]);
			  }
			  endOfDef();
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
                          incLineNr();
      		          current->program+=pyscannerYYtext;
			}
                      }
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 806 "pyscanner.l"
{
                        if (computeIndent(&pyscannerYYtext[1])<=g_indent)
			{
			  int i;
			  for (i=(int)pyscannerYYleng-1;i>=0;i--)
			  {
			    unput(pyscannerYYtext[i]);
			  }
			  endOfDef();
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
			  incLineNr();
      		          current->program+=pyscannerYYtext;
			}
      		      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 824 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 828 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscannerYYtext;
      	              }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 831 "pyscanner.l"
{ // something at indent >0
      		        current->program+=pyscannerYYtext;
			g_curIndent = computeIndent(pyscannerYYtext);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the function
			{
			  endOfDef(1);
                          BEGIN(Search);
			}
      		      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 841 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=pyscannerYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 848 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=pyscannerYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 855 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscannerYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 859 "pyscanner.l"
{ // normal comment 
      		        current->program+=pyscannerYYtext;
      		      }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 862 "pyscanner.l"
{ // comment half way
      		        current->program+=pyscannerYYtext;
                      }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 865 "pyscanner.l"
{ 
			incLineNr(); 
      		        current->program+=pyscannerYYtext;
		      }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 869 "pyscanner.l"
{ // any character
      		        current->program+=*pyscannerYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 874 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscannerYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 880 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscannerYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 63:
/* rule 63 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 886 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 64:
YY_RULE_SETUP
#line 895 "pyscanner.l"
{
			      //found function name
			      if (current->type.isEmpty()) 
			      {
				  current->type = "def";
			      }
			      current->name = pyscannerYYtext;
			      current->name = current->name.stripWhiteSpace();
			      newFunction();
                            }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 905 "pyscanner.l"
{ // function without arguments
			      g_specialBlock = TRUE; // expecting a docstring
			      bodyEntry = current;
                              current->bodyLine  = yyLineNr;
                              BEGIN( FunctionBody );
			    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 912 "pyscanner.l"
{
			       BEGIN( FunctionParams );
		            }
	YY_BREAK


case 67:
YY_RULE_SETUP
#line 918 "pyscanner.l"
{
                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 921 "pyscanner.l"
{ // Name of parameter
			  lineCount();
			  Argument *a = new Argument;
			  current->argList->append(a);
			  current->argList->getLast()->name = QCString(pyscannerYYtext).stripWhiteSpace();
			  current->argList->getLast()->type = "";
                        }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 928 "pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
			  g_defVal.resize(0);
			  g_braceCount=0;
			  BEGIN(FunctionParamDefVal);
      			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 936 "pyscanner.l"
{ // end of parameter list
        		  current->args = argListToString(current->argList);
                        }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 940 "pyscanner.l"
{
			  g_specialBlock = TRUE; // expecting a docstring
			  bodyEntry = current;
                          current->bodyLine  = yyLineNr;
                          BEGIN( FunctionBody );
                        }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 946 "pyscanner.l"
{ // a comment
			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 948 "pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 74:
YY_RULE_SETUP
#line 954 "pyscanner.l"
{ // internal opening brace
       			  g_braceCount++;
			  g_defVal+=*pyscannerYYtext;
       			}
	YY_BREAK
case 75:
#line 959 "pyscanner.l"
case 76:
YY_RULE_SETUP
#line 959 "pyscanner.l"
{
       			  if (g_braceCount==0)  // end of default argument
			  {
			    if (current->argList->getLast())
			    {
			      current->argList->getLast()->defval=g_defVal.stripWhiteSpace();
			    }
			    if (*pyscannerYYtext == ')')
			      current->args = argListToString(current->argList);
			    BEGIN(FunctionParams);
			  }
			  else // continue
			  {
			    g_braceCount--;
			    g_defVal+=*pyscannerYYtext;
			  }
       			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 976 "pyscanner.l"
{
			    g_defVal+=*pyscannerYYtext;
       			}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 979 "pyscanner.l"
{
       			    g_defVal+=*pyscannerYYtext;
			    incLineNr();
       			}
	YY_BREAK


case 79:
/* rule 79 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 987 "pyscanner.l"
{ // new def at indent 0
                        incLineNr();
			endOfDef();
			//g_hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 994 "pyscanner.l"
{  // start of a special comment at indent 0
                        incLineNr();
			endOfDef();
			//g_hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 81:
/* rule 81 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 1001 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscannerYYtext;
      	              }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 1004 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1008 "pyscanner.l"
{ // something at indent >0
                        g_curIndent=computeIndent(pyscannerYYtext);
			DBG_CTX((stderr,"g_curIndent=%d g_indent=%d\n",g_curIndent,g_indent));
                        if (g_curIndent<=g_indent) 
			  // jumped out of the class/method
			{
			  endOfDef(1);
			  g_indent=g_curIndent;
			  // make sure the next rule matches ^...
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
			  //g_hideClassDocs = FALSE;
                          BEGIN(Search);
			}
			else
			{
      		          current->program+=pyscannerYYtext;
			}
      		      }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1026 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=*pyscannerYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1033 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=*pyscannerYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1040 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscannerYYtext;
		        g_specialBlock = FALSE; 
			//g_hideClassDocs = FALSE;
                      }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1045 "pyscanner.l"
{ 
      		        current->program+=*pyscannerYYtext;
			incLineNr(); 
		      }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1049 "pyscanner.l"
{ // normal comment
      		        current->program+=pyscannerYYtext;
                      }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1052 "pyscanner.l"
{ // any character
		        g_specialBlock = FALSE; 
      		        current->program+=*pyscannerYYtext;
                      }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1056 "pyscanner.l"
{ // start of a comment block
      		        //if (!g_hideClassDocs) 
			current->program+=pyscannerYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1063 "pyscanner.l"
{ // start of a comment block
      		        //if (!g_hideClassDocs) 
			current->program+=pyscannerYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK

case 91:
YY_RULE_SETUP
#line 1071 "pyscanner.l"
{
			  if (current->type.isEmpty()) 
			  {
			      current->type = "class";
			  }

			  current->section = Entry::CLASS_SEC;
			  current->name = pyscannerYYtext;

			  // prepend scope in case of nested classes
			  if (current_root->section&Entry::SCOPE_MASK)
			  {
			    //printf("*** Prepending scope %s to class %s\n",current_root->name.data(),current->name.data());
			    current->name.prepend(current_root->name+"::");
			  }
			  
			  current->name = current->name.stripWhiteSpace();
			  current->fileName = yyFileName;        
			  docBlockContext   = YY_START;
			  docBlockInBody    = FALSE;
			  docBlockJavaStyle = FALSE;
			  docBlock.resize(0);

			  BEGIN(ClassInheritance);                 
                        }
	YY_BREAK

case 92:
YY_RULE_SETUP
#line 1098 "pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1101 "pyscanner.l"
{ // begin of the class definition
			 g_specialBlock = TRUE; // expecting a docstring
                         current->bodyLine  = yyLineNr;
			 current->program.resize(0);
      			 BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1108 "pyscanner.l"
{
                         current->extends->append(
					      new BaseInfo(substitute(pyscannerYYtext,".","::"),Public,Normal)
					    );
                         //Has base class-do stuff
                       }
	YY_BREAK


case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1118 "pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 lineCount();
      				 current->program+=pyscannerYYtext;
                               }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1124 "pyscanner.l"
{ // start of a comment block
				 initTriDoubleQuoteBlock();
      				 current->program+=pyscannerYYtext;
			 	 BEGIN(TripleComment);
                      	       }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1130 "pyscanner.l"
{ // start of a comment block
			         initTriSingleQuoteBlock();
      				 current->program+=pyscannerYYtext;
			         BEGIN(TripleComment);
                               }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1136 "pyscanner.l"
{
      				 current->program+=pyscannerYYtext;
			         //current->startLine = yyLineNr;
				 g_curIndent=computeIndent(pyscannerYYtext);
				 bodyEntry = current;
				 DBG_CTX((stderr,"setting indent %d\n",g_curIndent));
				 //printf("current->program=[%s]\n",current->program.data());
				 //g_hideClassDocs = TRUE;
			         BEGIN(ClassBody);
                               }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1147 "pyscanner.l"
{
				 
				 // Just pushback an empty class, and
				 // resume parsing the body.
                                 newEntry();
      				 current->program+=pyscannerYYtext;

				 // printf("Failed to find indent - skipping!");
				 BEGIN( Search );
                               }
	YY_BREAK


case 100:
YY_RULE_SETUP
#line 1161 "pyscanner.l"
{ // the assignment operator
                        //printf("====== VariableDec at line %d\n",yyLineNr);
			current->initializer = pyscannerYYtext;
			current->initializer += " ";
                      }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1166 "pyscanner.l"
{ // spaces
	              }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1168 "pyscanner.l"
{ // integer value
			current->type = "int";
			current->initializer += pyscannerYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1173 "pyscanner.l"
{ // floating point value
			current->type = "float";
			current->initializer += pyscannerYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1178 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer += pyscannerYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( SingleQuoteString );
     		      }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1185 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer += pyscannerYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( DoubleQuoteString );
     		      }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1192 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer += pyscannerYYtext;
			g_doubleQuote=TRUE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1201 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer += pyscannerYYtext;
			g_doubleQuote=FALSE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1209 "pyscanner.l"
{ // tuple
                        if (current->mtype!=Property)
			{
			  current->type = "tuple";
			}
      		        current->initializer+=*pyscannerYYtext;
                        g_atomStart='(';
			g_atomEnd=')';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1220 "pyscanner.l"
{ // list
			current->type = "list";
      		        current->initializer+=*pyscannerYYtext;
                        g_atomStart='[';
			g_atomEnd=']';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1228 "pyscanner.l"
{ // dictionary
			current->type = "dictionary";
      		        current->initializer+=*pyscannerYYtext;
                        g_atomStart='{';
			g_atomEnd='}';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1236 "pyscanner.l"
{ // comment
                        BEGIN( VariableEnd ); 
                      }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1239 "pyscanner.l"
{
      		        current->initializer+=pyscannerYYtext;
	              }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1242 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
                      }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1245 "pyscanner.l"
{
     		        unput('\n');
     			BEGIN( VariableEnd );
     		      }
	YY_BREAK


case 115:
YY_RULE_SETUP
#line 1252 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
                        if (g_atomStart==*pyscannerYYtext)
			{
			  g_atomCount++;
			}
                      }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1259 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
                        if (g_atomEnd==*pyscannerYYtext)
			{
			  g_atomCount--;
			}
			if (g_atomCount==0)
			{
			  BEGIN(VariableEnd);
			}
                      }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1270 "pyscanner.l"
{ // start of a comment block
                        g_specialBlock = FALSE;
			current->program+=pyscannerYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1277 "pyscanner.l"
{ // start of a comment block
                        g_specialBlock = FALSE;
			current->program+=pyscannerYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1283 "pyscanner.l"
{
       			g_stringContext=YY_START;
			current->initializer+="'";
			g_copyString=&current->initializer;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1289 "pyscanner.l"
{
       			g_stringContext=YY_START;
			current->initializer+="\"";
			g_copyString=&current->initializer;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1295 "pyscanner.l"
{
      		        current->initializer+=pyscannerYYtext;
	              }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1298 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
                      }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1301 "pyscanner.l"
{
      		        current->initializer+=*pyscannerYYtext;
     			incLineNr();
     		      }
	YY_BREAK


case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1309 "pyscanner.l"
{
                        incLineNr();
			newVariable();
                        BEGIN(Search);
                      }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1314 "pyscanner.l"
{ 
                        unput(*pyscannerYYtext);
			newVariable();
                        BEGIN(Search);
      		      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1319 "pyscanner.l"
{ yyterminate();
                        newEntry();
                      }
	YY_BREAK


case 126:
#line 1326 "pyscanner.l"
case 127:
YY_RULE_SETUP
#line 1326 "pyscanner.l"
{
			  // printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
			  if (g_doubleQuote==(pyscannerYYtext[0]=='"')) 
			  {
			    if (g_specialBlock) // expecting a docstring
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      //printf("-------> current=%p bodyEntry=%p\n",current,bodyEntry);
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    else if (g_packageCommentAllowed) // expecting module docs
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      actualDoc.prepend("\\namespace "+g_moduleScope+"\\_linebr ");
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    if ((docBlockContext==ClassBody /*&& !g_hideClassDocs*/) ||
				docBlockContext==FunctionBody)
			    {
			      current->program+=docBlock;
			      current->program+=pyscannerYYtext;
			    }
                            //if (g_hideClassDocs)
			    //{
                            //  current->startLine = yyLineNr;
			    //}
			    //g_hideClassDocs=FALSE;
			    BEGIN(docBlockContext);
			  }
                          else 
			  {
                            docBlock += pyscannerYYtext;
                          }
			  g_packageCommentAllowed = FALSE;
                        }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1373 "pyscanner.l"
{ // leading whitespace
      			  int indent = computeIndent(pyscannerYYtext);
			  if (indent>=g_curIndent)
			  { // strip g_curIndent amount of whitespace
			    int i;
			    for (i=0;i<indent-g_curIndent;i++) docBlock+=' ';
			    DBG_CTX((stderr,"stripping indent %d\n",g_curIndent));
			  }
			  else
			  {
			    DBG_CTX((stderr,"not stripping: %d<%d\n",indent,g_curIndent));
			    docBlock += pyscannerYYtext;
			  }
      			}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1387 "pyscanner.l"
{
			  docBlock += pyscannerYYtext;
                        }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1390 "pyscanner.l"
{
      			  incLineNr();
			  docBlock += pyscannerYYtext;
      			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1394 "pyscanner.l"
{ // espaced char
			  docBlock += pyscannerYYtext;
      			}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1397 "pyscanner.l"
{
			  docBlock += pyscannerYYtext;
      			}
	YY_BREAK


case 133:
YY_RULE_SETUP
#line 1403 "pyscanner.l"
{ // skip leading hashes
      			}
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
YY_RULE_SETUP
#line 1405 "pyscanner.l"
{ // continuation of the comment on the next line
      			  docBlock+='\n';
			  docBrief = FALSE;
                          startCommentBlock(FALSE);
			  incLineNr();
      			}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1411 "pyscanner.l"
{ // any other stuff
      			  docBlock+=pyscannerYYtext;
      			}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1414 "pyscanner.l"
{ // new line that ends the comment
			  handleCommentBlock(docBlock, docBrief);
      			  incLineNr();
			  BEGIN(docBlockContext);
      			}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1419 "pyscanner.l"
{ // anything we missed
      			  docBlock+=*pyscannerYYtext;
      			}
	YY_BREAK


case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1425 "pyscanner.l"
{ // line continuation
      			         addToString(pyscannerYYtext);
      				 incLineNr();
                               }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1429 "pyscanner.l"
{ // espaced char
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1432 "pyscanner.l"
{ // tripple double quotes
      			         addToString(pyscannerYYtext);
      			       }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1435 "pyscanner.l"
{ // end of the string
      			         addToString(pyscannerYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1439 "pyscanner.l"
{ // normal chars
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1442 "pyscanner.l"
{ // normal char
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK


case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 1448 "pyscanner.l"
{ // line continuation
      			         addToString(pyscannerYYtext);
      				 incLineNr();
                               }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1452 "pyscanner.l"
{ // espaced char
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1455 "pyscanner.l"
{ // tripple single quotes
      			         addToString(pyscannerYYtext);
      			       }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1458 "pyscanner.l"
{ // end of the string
      			         addToString(pyscannerYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1462 "pyscanner.l"
{ // normal chars
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1465 "pyscanner.l"
{ // normal char
      			         addToString(pyscannerYYtext);
                               }
	YY_BREAK


case 150:
#line 1472 "pyscanner.l"
case 151:
YY_RULE_SETUP
#line 1472 "pyscanner.l"
{
                          *g_copyString += pyscannerYYtext;
			  if (g_doubleQuote==(pyscannerYYtext[0]=='"')) 
			  {
			    BEGIN(g_stringContext);
			  }
                        }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1481 "pyscanner.l"
{
			  lineCount();
                          *g_copyString += pyscannerYYtext;
                        }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 1485 "pyscanner.l"
{
      			  incLineNr();
                          *g_copyString += pyscannerYYtext;
      			}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1489 "pyscanner.l"
{
                          *g_copyString += *pyscannerYYtext;
      			}
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
				 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscannerYYtext, YY_START, yyLineNr);

                               }
  */
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1504 "pyscanner.l"
{
				 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
				 //       YY_START, yyLineNr);

                                 lineCount();
                               }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1511 "pyscanner.l"
{
				 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscannerYYtext, YY_START, yyLineNr);

                               }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1518 "pyscanner.l"
ECHO;
	YY_BREAK
#line 3588 "/space/projects/slicepp/doxygen/build/generated_src/pyscanner.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pyscannerYYin at a new source and called
			 * pyscannerYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pyscannerYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pyscannerYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pyscannerYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pyscannerYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pyscannerYYrestart(pyscannerYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pyscannerYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 463 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 463 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 462);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up pyscannerYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pyscannerYYrestart(pyscannerYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pyscannerYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pyscannerYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pyscannerYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pyscannerYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE );
	}

	pyscannerYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	pyscannerYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pyscannerYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pyscannerYYpop_buffer_state();
	 *		pyscannerYYpush_buffer_state(new_buffer);
     */
	pyscannerYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pyscannerYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pyscannerYYwrap()) processing, but the only time this flag
	 * is looked at is after pyscannerYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pyscannerYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pyscannerYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pyscannerYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pyscannerYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pyscannerYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pyscannerYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pyscannerYY_create_buffer()
 * 
 */
    void pyscannerYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pyscannerYYfree((void *) b->yy_ch_buf  );

	pyscannerYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pyscannerYYrestart() or at EOF.
 */
    static void pyscannerYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pyscannerYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pyscannerYY_init_buffer was _probably_
     * called from pyscannerYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pyscannerYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pyscannerYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pyscannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pyscannerYYensure_buffer_stack();

	/* This block is copied from pyscannerYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pyscannerYY_switch_to_buffer. */
	pyscannerYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pyscannerYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pyscannerYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pyscannerYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pyscannerYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscannerYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscannerYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pyscannerYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pyscannerYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pyscannerYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pyscannerYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pyscannerYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pyscannerYY_scan_string (yyconst char * yystr )
{
    
	return pyscannerYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pyscannerYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscannerYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pyscannerYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pyscannerYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pyscannerYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscannerYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pyscannerYYtext[pyscannerYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pyscannerYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pyscannerYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pyscannerYYget_lineno  (void)
{
        
    return pyscannerYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *pyscannerYYget_in  (void)
{
        return pyscannerYYin;
}

/** Get the output stream.
 * 
 */
FILE *pyscannerYYget_out  (void)
{
        return pyscannerYYout;
}

/** Get the length of the current token.
 * 
 */
int pyscannerYYget_leng  (void)
{
        return pyscannerYYleng;
}

/** Get the current token.
 * 
 */

char *pyscannerYYget_text  (void)
{
        return pyscannerYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pyscannerYYset_lineno (int  line_number )
{
    
    pyscannerYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pyscannerYY_switch_to_buffer
 */
void pyscannerYYset_in (FILE *  in_str )
{
        pyscannerYYin = in_str ;
}

void pyscannerYYset_out (FILE *  out_str )
{
        pyscannerYYout = out_str ;
}

int pyscannerYYget_debug  (void)
{
        return pyscannerYY_flex_debug;
}

void pyscannerYYset_debug (int  bdebug )
{
        pyscannerYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pyscannerYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pyscannerYYin = stdin;
    pyscannerYYout = stdout;
#else
    pyscannerYYin = (FILE *) 0;
    pyscannerYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pyscannerYYlex_init()
     */
    return 0;
}

/* pyscannerYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pyscannerYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pyscannerYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pyscannerYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pyscannerYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    pyscannerYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pyscannerYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pyscannerYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pyscannerYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pyscannerYYfree (void * ptr )
{
	free( (char *) ptr );	/* see pyscannerYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1518 "pyscanner.l"



//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      inputString = ce->program;
      inputPosition = 0;
      pyscannerYYrestart( pyscannerYYin ) ;
      if (ce->section&Entry::COMPOUND_MASK)
      {
        current_root = ce ;
        BEGIN( Search );
      }
      else if (ce->parent())
      {
        current_root = ce->parent();
	//printf("Searching for member variables in %s parent=%s\n",
	//    ce->name.data(),ce->parent->name.data());
	BEGIN( SearchMemVars );
      }
      yyFileName = ce->fileName;
      yyLineNr   = ce->bodyLine ;
      if (current) delete current;
      current = new Entry;
      initEntry();

      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      pyscannerYYlex() ;
      g_lexInit=TRUE;
      delete current; current=0;
      ce->program.resize(0);

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);

    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();

  inputString = fileBuf;
  inputPosition = 0;

  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  g_specialBlock = FALSE;


  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    //setContext();
    msg("Parsing file %s...\n",yyFileName.data());

    QFileInfo fi(fileName);
    g_moduleScope = findPackageScope(fileName);
    QCString baseName=fi.baseName().utf8();
    if (baseName!="__init__") // package initializer file is not a package itself
    {
      if (!g_moduleScope.isEmpty())
      {
	g_moduleScope+="::";
      }
      g_moduleScope+=baseName;
    }

    current            = new Entry;
    initEntry();
    current->name      = g_moduleScope;
    current->section   = Entry::NAMESPACE_SEC;
    current->type      = "namespace";
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    current->bodyLine  = yyLineNr;

    rt->addSubEntry(current);

    current_root  = current ;
    initParser();
    current       = new Entry;

    groupEnterFile(yyFileName,yyLineNr);
    
    current->reset();
    initEntry();
    pyscannerYYrestart( pyscannerYYin );
    BEGIN( Search );
    pyscannerYYlex();
    g_lexInit=TRUE;

    groupLeaveFile(yyFileName,yyLineNr);

    current_root->program.resize(0);
    delete current; current=0;

    parseCompounds(current_root);

    inputFile.close();
  }
  
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  g_specialBlock = FALSE;
  g_packageCommentAllowed = FALSE;

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  pyscannerYY_switch_to_buffer(pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;

  // set new string
  inputString = text;
  inputPosition = 0;
  pyscannerYYrestart( pyscannerYYin );

  BEGIN( FunctionDec );

  pyscannerYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
  pyscannerYY_switch_to_buffer(orgState);
  pyscannerYY_delete_buffer(tmpBuf);

  inputString = orgInputString; 
  inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

void pyscanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    pyscannerYYlex_destroy();
  }
#endif
}

//----------------------------------------------------------------------------

void PythonLanguageScanner::parseInput(const char *fileName,
                                       const char *fileBuf,
                                       Entry *root,
                                       bool /*sameTranslationUnit*/,
                                       QStrList & /*filesInSameTranslationUnit*/)
{
  g_thisParser = this;
  printlex(pyscannerYY_flex_debug, TRUE, __FILE__, fileName);
  ::parseMain(fileName,fileBuf,root);
  printlex(pyscannerYY_flex_debug, FALSE, __FILE__, fileName);

  // May print the AST for debugging purposes
  // printAST(global_root);
}

bool PythonLanguageScanner::needsPreprocessing(const QCString &)
{
  return FALSE;
}

void PythonLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf,
    const char *scopeName,
    const QCString &input,
    SrcLangExt /*lang*/,
    bool isExampleBlock,
    const char *exampleName,
    FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    MemberDef *memberDef,
    bool showLineNumbers,
    Definition *searchCtx,
    bool collectXRefs
    )
{
  ::parsePythonCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                    fileDef,startLine,endLine,inlineFragment,memberDef,
                    showLineNumbers,searchCtx,collectXRefs);
}

void PythonLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);

}

void PythonLanguageScanner::resetCodeParserState()
{
  ::resetPythonCodeParserState();
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void pyscannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


