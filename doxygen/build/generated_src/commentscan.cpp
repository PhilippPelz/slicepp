#line 2 "/space/projects/slicepp/doxygen/build/generated_src/commentscan.cpp"

#line 4 "/space/projects/slicepp/doxygen/build/generated_src/commentscan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 206
#define YY_END_OF_BUFFER 207
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[816] =
    {   0,
       80,   80,  124,  124,  138,  138,  153,  153,  197,  197,
      144,  144,  207,  206,   47,  206,   47,  206,   46,  206,
       47,  206,   47,  206,   47,  206,   47,  206,   45,   47,
      206,   47,  206,   47,  206,   28,   47,  206,   47,  206,
       47,  206,   47,  206,   47,  206,   47,  206,   45,   47,
      206,   47,  206,   47,  206,   93,  206,   92,  206,   93,
      206,   90,   93,  206,   93,  206,   93,  206,  206,   94,
      206,  114,  206,  113,  206,  114,  206,  111,  114,  206,
      114,  206,   75,  206,   75,  206,   74,  206,   75,  206,
       75,  206,   75,  206,   71,   75,  206,   75,  206,   75,

      206,   79,  206,   78,  206,   79,  206,   76,   79,  206,
       79,  206,   79,  206,   79,  206,   83,  206,   82,  206,
       80,   83,  206,   80,   83,  206,   83,  206,   80,   83,
      206,   80,   83,  206,   83,  206,   75,  206,   74,  206,
       75,  206,   75,  206,   75,  206,   75,  206,   75,  206,
      102,  206,  101,  206,   99,  102,  206,  102,  206,  106,
      206,  105,  206,  106,  206,  106,  206,  110,  206,  109,
      206,  110,  206,  110,  206,   98,  206,   95,  206,   98,
      206,   96,   98,  206,   98,  206,   98,  206,   61,  206,
       60,  206,   61,  206,   58,   61,  206,   61,  206,   65,

      206,   65,  206,   64,  206,   65,  206,   65,  206,   65,
      206,   62,   65,  206,   65,  206,   65,  206,   69,  206,
       68,  206,   69,  206,   66,   69,  206,   69,  206,   86,
      206,   84,  206,  206,   88,  206,   89,  206,  206,  120,
      206,  119,  206,  118,  120,  206,  120,  206,  124,  127,
      206,  121,  206,  124,  127,  206,  127,  206,  127,  206,
      129,  206,  128,  206,  206,  132,  206,  132,  206,  130,
      206,  132,  206,  132,  206,  138,  142,  206,  139,  206,
      142,  206,  142,  206,  142,  206,  142,  206,  142,  206,
      117,  206,  115,  206,  117,  206,  151,  206,  151,  206,

      149,  206,  143,  151,  206,  148,  151,  206,  151,  206,
      154,  206,  153,  154,  206,  152,  206,  154,  206,  161,
      162,  206,  160,  206,  162,  206,  162,  206,  162,  206,
      172,  173,  206,  163,  206,  173,  206,  173,  206,  173,
      206,  176,  206,  174,  206,  176,  206,  180,  206,  178,
      206,  177,  180,  206,  180,  206,  183,  186,  206,  181,
      206,  184,  186,  206,  185,  186,  206,  186,  206,  186,
      206,  189,  206,  187,  206,  189,  206,  192,  206,  191,
      206,  192,  206,  190,  192,  206,  192,  206,  195,  206,
      194,  206,  195,  206,  193,  195,  206,  195,  206,   55,

       57,  206,   56,  206,   57,  206,   57,  206,  135,  206,
      134,  206,  133,  135,  206,  135,  206,   50,   51,  206,
       49,  206,   51,  206,   51,  206,  197,  199,  206,  198,
      206,  199,  206,  199,  206,  199,  206,  202,  206,  201,
      206,  200,  202,  206,  202,  206,  204,  205,  206,  203,
      206,  205,  206,  144,  206,  144,  147,  206,  145,  206,
      146,  206,   44,    4,   37,   39,   41,   39,   27,   27,
       19,   27,   19,   19,   19,   19,   19,   19,   25,   26,
       21,   27,   28,   19,   19,   19,   19,   19,   19,   19,
       19,   31,   32,   37,   29,   90,   90,   91,   90,   94,

      111,  111,  112,   71,   71,   73,   71,   76,   76,   77,
       76,   80,   80,   80,   80,   80,   80,   81,   80,   99,
      100,  103,  104,  108,  107,  108,   96,   96,   97,   96,
       58,   58,   58,   59,   62,   62,   63,   62,   66,   66,
       67,   84,   85,   88,   87,  118,  124,  121,  124,  126,
      126,  123,  128,  131,  138,  141,  140,  116,  143,  148,
      150,  153,  152,  161,  172,  175,  177,  179,  183,  182,
      188,  190,  190,  193,  193,   55,  133,   50,  197,  196,
      200,  204,  144,   27,   38,   36,   43,   39,   43,   43,
       43,   39,   43,   43,   40,    7,   35,    1,    1,    2,

       19,   19,   19,   19,   23,   24,   19,   19,   19,   21,
        5,   19,   19,   19,   19,   19,   19,   19,   33,   36,
       30,   90,   90,   71,   76,   76,   80,   80,   80,   96,
       96,   58,   58,   58,   58,   62,   66,  125,   52,   53,
       54,   48,  196,  200,   43,   43,   17,   34,    1,   20,
        2, 8198,   19,16390,   19,   19,   19,   19,   19,   19,
     8198,   19,16390,   19,   19,   19,   19,   19,   90,   70,
       76,   80,   80,   72,   96,   58,   58,   58,   66,  125,
      156,  164,   48,  200,   16,   42,    7,   14, 8198, 8198,
       19,   19,   19,   22,   19,   19,    5, 8198,   19,   19,

       19,   90,   76,   80,   96,    3,   15,    8,   19,   19,
       22,   19,   19,   19,   19,   19,   90,   76,   80,   96,
       84,  158,  166,   19,   19,   19,   19,   19,   19,   19,
       90,   76,   80,   96,  137,  157,  155,  165,   19,   19,
       19,   19,   19,   19,   19,   90,   92,  113,   74,   76,
       78,   80,   82,  101,  105,  109,   95,   96,   60,   64,
       68,   86,   89,  119,  122,  129,  130,  136,  139,  115,
      149,  159,  160,  163,  174,  178,  181,  187,  191,  194,
      134,   49,  198,  201,  203,   13,   10,    9,   19,   19,
       19,    5,   19,   19,  167,   12,   11,   19,   19,   19,

       19,   19,   19,  170,   18,   19,   18,   19,  171,  168,
       18,   19,  171,  169,   44
    } ;

static yyconst flex_int16_t yy_accept[1190] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   14,   15,   17,   19,   21,
       23,   25,   27,   29,   32,   34,   36,   39,   41,   43,

       45,   47,   49,   52,   54,   56,   58,   60,   62,   65,
       67,   69,   70,   72,   74,   76,   78,   81,   83,   85,
       87,   89,   91,   93,   95,   98,  100,  102,  104,  106,
      108,  111,  113,  115,  117,  119,  121,  124,  127,  129,
      132,  135,  137,  139,  141,  143,  145,  147,  149,  151,
      153,  155,  158,  160,  162,  164,  166,  168,  170,  172,
      174,  176,  178,  180,  182,  185,  187,  189,  191,  193,
      195,  198,  200,  202,  204,  206,  208,  210,  212,  215,
      217,  219,  221,  223,  225,  228,  230,  232,  234,  235,
      237,  239,  240,  242,  244,  247,  249,  252,  254,  257,

      259,  261,  263,  265,  266,  268,  270,  272,  274,  276,
      279,  281,  283,  285,  287,  289,  291,  293,  295,  297,
      299,  301,  303,  306,  309,  311,  313,  316,  318,  320,
      323,  325,  327,  329,  331,  334,  336,  338,  340,  342,
      344,  346,  348,  350,  352,  355,  357,  360,  362,  365,
      368,  370,  372,  374,  376,  378,  380,  382,  384,  387,
      389,  391,  393,  395,  398,  400,  403,  405,  407,  409,
      411,  413,  416,  418,  421,  423,  425,  427,  430,  432,
      434,  436,  438,  440,  442,  445,  447,  450,  452,  454,
      456,  459,  461,  463,  463,  463,  463,  463,  464,  464,

      464,  465,  465,  465,  465,  465,  465,  466,  467,  468,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  470,  470,  471,  472,  473,
      474,  475,  476,  477,  478,  479,  480,  481,  483,  484,
      485,  486,  487,  488,  489,  490,  491,  492,  492,  492,
      492,  492,  492,  492,  493,  494,  495,  495,  496,  496,
      496,  496,  496,  496,  497,  498,  498,  498,  498,  499,
      500,  500,  501,  502,  502,  503,  503,  503,  504,  504,
      504,  504,  504,  504,  505,  505,  505,  506,  506,  506,
      507,  507,  507,  507,  508,  508,  509,  510,  510,  510,

      510,  511,  512,  512,  513,  514,  514,  515,  516,  517,
      517,  517,  518,  518,  519,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  521,
      521,  522,  522,  522,  523,  523,  525,  525,  525,  526,
      526,  527,  527,  527,  528,  529,  529,  529,  529,  530,
      531,  532,  532,  532,  533,  533,  534,  534,  535,  535,
      535,  535,  535,  535,  536,  536,  536,  537,  537,  538,
      538,  538,  538,  539,  540,  540,  541,  541,  542,  542,
      543,  543,  543,  544,  544,  545,  545,  546,  546,  547,
      547,  548,  549,  550,  550,  551,  552,  552,  553,  553,

      554,  554,  554,  554,  554,  555,  555,  556,  557,  558,
      558,  558,  558,  559,  559,  559,  560,  561,  561,  562,
      562,  563,  564,  564,  564,  565,  565,  565,  565,  566,
      566,  566,  566,  566,  566,  566,  567,  567,  568,  568,
      569,  569,  570,  570,  571,  571,  571,  572,  572,  573,
      573,  574,  574,  574,  575,  575,  576,  576,  576,  577,
      577,  577,  578,  578,  579,  579,  579,  580,  581,  581,
      582,  582,  582,  583,  583,  584,  585,  585,  585,  585,
      585,  586,  587,  588,  590,  591,  592,  594,  595,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  597,

      597,  597,  597,  597,  597,  598,  599,  600,  601,  602,
      603,  604,  605,  606,  607,  607,  608,  609,  610,  611,
      612,  613,  614,  615,  616,  617,  618,  619,  619,  619,
      619,  619,  620,  621,  621,  622,  623,  623,  624,  624,
      624,  624,  624,  624,  625,  626,  626,  627,  628,  628,
      629,  629,  630,  630,  630,  630,  630,  630,  630,  631,
      631,  632,  633,  634,  635,  636,  636,  636,  637,  637,
      638,  638,  638,  638,  638,  638,  638,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  640,  641,  642,  642,  642,  643,
      643,  644,  644,  645,  645,  645,  645,  645,  645,  645,
      646,  647,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  649,  650,  651,  652,  655,
      656,  657,  657,  658,  659,  660,  660,  661,  664,  665,
      666,  667,  668,  669,  669,  669,  669,  670,  670,  670,
      671,  671,  671,  672,  673,  673,  674,  675,  675,  675,
      675,  676,  676,  677,  678,  679,  679,  679,  680,  680,
      680,  680,  680,  680,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  683,

      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  684,  684,  684,  685,  685,  685,  685,  686,
      686,  686,  687,  687,  687,  687,  687,  687,  687,  689,
      689,  689,  689,  690,  692,  693,  694,  695,  696,  697,
      699,  700,  701,  702,  702,  703,  703,  703,  704,  705,
      705,  705,  705,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      707,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  710,  711,  712,  713,  714,  715,  716,  717,  718,
      718,  718,  719,  720,  720,  720,  720,  721,  721,  721,
      721,  721,  721,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  723,  723,  723,  723,  723,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  725,  726,  727,
      728,  729,  730,  731,  732,  732,  732,  733,  734,  734,

      734,  734,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  737,  738,
      738,  738,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  740,  741,  742,  743,  744,
      745,  746,  748,  749,  750,  752,  754,  755,  756,  757,
      759,  760,  761,  762,  763,  764,  765,  766,  767,  768,
      768,  769,  769,  769,  769,  769,  769,  769,  769,  770,
      771,  772,  773,  774,  774,  774,  774,  774,  774,  775,

      776,  777,  778,  779,  780,  781,  782,  783,  784,  785,
      786,  786,  786,  786,  787,  788,  789,  790,  791,  792,
      793,  794,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  796,  796,  796,  797,  798,  798,  798,
      799,  800,  800,  801,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  803,  803,  804,
      804,  804,  804,  804,  804,  804,  805,  805,  805,  807,
      807,  809,  809,  809,  810,  811,  811,  813,  813,  813,
      814,  814,  814,  814,  814,  814,  815,  816,  816
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   38,   39,   40,
       32,   41,   32,   42,   43,   32,   32,   32,   32,   32,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   32,   57,   58,   59,   60,
       61,   62,   32,   63,   64,   65,   66,   67,   68,   69,
       70,   32,   71,   72,   73,   74,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,    1,   24,    1,   25,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   23,   23,   23,   27,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       28,   29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[1422] =
    {   0,
        0,    0,    0,   74,  146,  220, 5287, 5281,  294,    0,
      369,    0,  444,  518,  592,  666,  740,    0,  815,    0,
       74,   75,   77,   80,  890,  964, 1038,    0, 1113,    0,
     1188,    0, 1263,    0,   87,   90, 1338,    0,   91,   95,
     1413,    0,  109,  121,  158,  183,   82,   96, 1488, 1563,
      128,  140,  190,  205,  237,  243,   99,  112, 1638,    0,
      244,  452,  131,  134, 1713,    0, 1788,    0,  234,  449,
      456,  458, 1863,    0,  196,  463,  467,  469, 1938, 2012,
      135,  136,  193,  246, 5282, 9929, 9929,  500,  209, 5274,
     5271, 5253,  181,  531, 2081, 2140,  551, 2207, 2280,   98,

      250,  616,  690,  478,  624, 9929, 9929, 5271,  468,  488,
     1503, 5243, 9929, 9929, 9929,    0,   90,  553, 9929,  695,
      914,  920,  937, 5219,  994,  576,  269, 9929, 9929, 5234,
      542,  609, 5215, 1578, 9929, 9929, 2352, 1512, 1587, 1951,
     9929, 2043,  998, 1002, 1985, 2089, 5216, 1963,  281, 9929,
     9929,    0,  583, 9929, 9929, 5225,  647, 9929, 9929, 5224,
      654, 9929, 9929, 5218,  908, 1497, 2136, 9929, 9929,    0,
     2175,  945, 9929, 1975, 2037, 2099, 2217, 5200, 2049, 1538,
      717, 9929, 9929,    0, 5204, 1544, 9929, 5203, 1551,    0,
     9929, 1997, 9929, 9929,    0, 5173,  537, 9929, 5174, 2219,

     2002, 9929,    0, 5141, 9929,  469, 9929, 5177, 5136,    0,
     9929, 9929, 5163, 5167, 5125,  131, 9929, 9929, 2071, 9929,
      275, 9929, 9929,  607, 2123, 9929,  641, 9929, 5128,    0,
     9929, 9929,   54,  528,    0, 9929, 9929,  672,  967, 9929,
     9929, 2199, 9929, 9929,    0, 2236,    0, 9929, 9929, 9929,
     9929, 2245, 9929, 9929, 2260, 9929, 9929,    0,  164, 5127,
     9929, 9929,    0,  244, 5126,    0, 9929, 5119, 5118, 9929,
     9929,    0, 5123,    0, 9929, 5152, 5121,    0, 9929, 9929,
     5093,  120, 9929, 9929, 5148, 5118,    0, 9929, 5117,    0,
        0, 9929, 9929,  629, 2419, 2486,  988, 2264, 5116, 5155,

     9929,    0, 5137, 5133,    0,  199,  512, 9929, 9929, 2560,
     5127,  548, 5135,  669, 1490,   71,  562,  216,  516, 2285,
      587,  604, 5099, 5084, 9929, 5129,  607, 2634, 5070, 5077,
     5087, 5077,  901,  561, 5073, 9929, 9929,    0, 1596,  979,
     2167, 2266, 1550, 2268, 2329, 2284, 2272, 2707,  565, 2151,
      712,  936, 2232,  643, 2367, 2376, 1025, 9929, 1598, 2298,
     2378, 2386, 5128, 9929, 2052,  888, 2304, 1522, 9929, 2388,
     5131, 9929,  536, 5124,  635, 5109, 1624, 9929, 5073, 2337,
     2413, 5107, 2450, 2458, 2475, 2514, 2497, 2075, 1628, 9929,
     5071, 2504, 2524, 5104, 5114, 9929, 2517, 2090, 2535, 2185,

     9929, 2571, 5113,  485, 2779, 2853, 5112, 9929, 2574, 2163,
     2595, 5108, 2341, 9929, 2603, 2647, 2664, 5090, 2672, 2681,
     2539, 2732, 2754,    0, 2808, 2547, 2711,  947,    0, 2384,
     9929, 5054, 5104, 9929, 2432, 9929, 5051, 5101, 9929, 2464,
     9929, 5048, 5098, 9929, 2673, 2234, 2708, 2483, 9929, 2724,
     2812, 2771,    0, 2880, 5081, 2908, 2593, 9929, 5045, 2825,
     2930, 5079, 2938, 2891, 2758, 2955, 2947, 2598, 9929, 5043,
     2835, 2972,    0, 5082, 5089, 5079, 2606, 9929, 5033, 5072,
     5034, 2622, 9929, 5030,    0, 2651, 9929, 5026,    0, 5024,
     2116, 9929, 5036, 5033, 9929, 5068, 2695, 9929, 5016,    0,

     5015, 1990, 5065, 5064, 9929, 5009,    0, 9929, 9929, 4972,
     4973, 2746, 9929, 4972, 2094, 9929, 2198, 2844, 9929, 4971,
     2917, 9929, 4975, 4963,    0,  419, 4962, 4955,    0, 4952,
     4958, 4962,  846, 4951, 2885, 9929, 4920,    0, 2902, 9929,
     4915,    0, 2913, 9929, 4905, 2964, 9929, 4904,  707, 4952,
     1500, 4937, 4900, 1521, 4948, 1581, 4933, 4897,    0, 4945,
      631,    0, 4889,    0,  677, 4886,    0,    0, 4885, 4924,
        0, 4882,    0, 4879,    0, 4880, 4865, 4899,    0, 4903,
     1588, 4894, 9929, 9929, 4892, 3029, 4891, 4898, 9929, 4898,
     1495, 4862, 4838, 2003,  900, 2380,  980, 2520, 9929, 2064,

     1954, 2247, 4844, 4843, 4883, 2303, 2978,    0, 2345, 2610,
     2408, 2785, 9929, 9929,    0, 2701, 2794, 2636,    0,    0,
     3005, 2966, 2989, 2980, 3012, 3011, 3013, 3061, 2436, 2787,
     3065, 9929, 3088, 3092, 2766, 2974, 2982, 3062,    0, 4839,
     3117, 3121, 4834, 4856, 3094, 3109, 3111, 1503, 3167, 3175,
     3198, 3207, 4864, 2868, 2984, 4820, 4819, 4818, 3117, 3125,
     3210, 3255, 3199, 3265, 3287, 4814, 4810,    0,    0, 4847,
     4807, 4797, 4805, 4804, 4768,    0,    0, 3932, 3931, 3930,
     3932, 3926, 3925, 3924, 3918, 3909, 3920, 3909, 3910, 3910,
     3019, 3897, 3905, 3902, 3894, 3889, 3885, 3867, 3865,    0,

     3855,    0, 3841, 9929, 9929, 9929, 3839, 3868, 2817, 3835,
        0, 3828, 3859, 3819, 3815, 2403, 3801, 3846,    0, 3132,
     2859, 9929, 2269, 3789, 3788,  863, 2299, 3816, 3001, 2392,
     3067, 2104, 3792, 3780, 9929, 2993, 9929,    0, 3310, 2997,
     3150, 3762, 3094, 3136, 3182, 3789, 3205, 3385, 3173, 3249,
     3410, 3416, 3417, 3411, 3421, 3446, 3422, 3764, 3277, 9929,
     3476, 3760, 3466, 3526, 3600, 3469, 9929, 3758, 3745, 3741,
     3477,    0, 3553, 3627, 3500, 3736, 3734, 3770, 3715, 3709,
     3701, 3697, 3695,    0, 3682, 3680, 3672, 3527, 3671, 3651,
     3650, 3610, 3617, 3596, 9929, 3582, 3581, 3577, 9929, 3567,

     3578, 3557, 3557, 3555, 3543, 3528, 3521, 3520, 3507, 3501,
     3499, 3081, 3492, 3488, 3523, 3474, 3464, 3457, 9929, 3494,
     3280, 9929, 3482, 3458, 3439, 2386, 3194, 3222, 9929, 2452,
     3428, 3438,    0, 3161, 3232, 3240, 3403, 3415, 3445, 3674,
     3463, 3508, 3582, 3637, 3502, 3421, 3412, 3683, 3698, 3402,
     3401, 3400, 3685, 3749, 3390, 3385, 3381, 3369, 3373, 3252,
     3251, 3247, 3231, 3221, 3211, 3210, 3197, 3213,  931, 3183,
     3185, 3194, 3172, 3163, 3157, 3143, 3137, 3132, 3112, 3096,
     3105,  115, 3088, 3097, 3075, 1907, 3064, 3058, 3056, 3054,
     3046, 3037, 3035, 3025, 3019, 3007, 2980, 2976, 2971, 2991,

     9929, 2945, 2942, 2276, 3441, 9929, 2963, 3541, 2927, 2916,
     3251, 3434, 9929, 3514, 3606, 3662, 3720, 3722, 3546, 2923,
     2914, 3715, 3755, 2906, 2905, 2897, 3758, 3788, 3810, 2896,
     2895, 2889, 9929, 2888, 2887, 2874, 2872, 2859, 2857, 2841,
      150, 2832, 2821, 2821, 2829, 2822, 2816, 2805, 2805, 2784,
     2792, 2769, 2752, 2751, 9929, 2725,    0,    0, 2721, 9929,
     2699, 3430, 2691, 2684, 2694, 2691, 2690, 2683, 2674, 2670,
     2668, 2662, 2661, 2653, 2652, 2645, 2640, 2631, 2629, 2615,
     2608, 2354, 2638, 3558, 2598, 2587, 3587, 3661, 3663, 3739,
     3734, 3754, 3784, 3798, 2592, 2584, 3804, 3819, 2583, 2574,

     2567, 3827, 2560, 2554, 2544, 2528, 2524, 2519, 2502, 2500,
     2492, 2495, 2497,    0, 2476, 2478, 2453, 2444, 9929, 2454,
     2440, 2430, 2426, 2412, 2402, 2394,    0, 9929, 9929, 2393,
     2399, 9929, 2401, 2372, 2355, 2344, 2341, 2331, 2304, 2300,
     2251, 2236, 2225, 2221, 2198, 2188, 2179, 2173, 2144, 2142,
     2129, 3632, 2169, 2151, 3793, 3651, 3724, 3849, 3823, 3851,
     3857, 3847, 9929, 9929, 3855, 3862, 9929, 9929, 9929, 3880,
     9929, 9929, 9929, 9929, 9929, 9929, 9929, 9929, 9929, 2114,
     9929, 2110, 2098, 2100, 2098, 2104, 2081, 2073, 9929, 9929,
     9929, 9929, 9929, 2032, 2027, 3615, 2026, 2017, 9929, 9929,

     9929, 9929, 9929, 9929, 9929, 9929, 9929, 9929, 9929, 9929,
     2039, 2009, 3858, 9929, 9929, 9929, 3874, 3884, 3903,  682,
     3907, 3908, 1972, 1972, 1940, 1933, 1914, 1906, 1902, 1570,
     1561, 1565, 9929, 1558, 1565, 9929, 9929, 1567, 3899, 3913,
     3915,  223, 3925, 3917, 1527, 1487, 1449,  962,  956,  929,
      883,  851,  872, 3656,  841,  658, 3926,  930, 3927,  626,
      591,  593,  561,  539,  451, 9929, 3657,  429, 3761, 2069,
     3932,  413,  191, 3931, 9929,  190, 3933,  970,  116, 3937,
       58,  490,   16, 3938, 2018, 9929, 3944, 9929, 3989, 4021,
     4053, 4085, 4117, 4149, 4181, 4213, 4245, 4277, 4309, 4341,

     4373, 4405, 4437, 4469, 4501, 4533, 4565, 4597, 4629, 4661,
     4693, 4725, 4757, 4789, 4821, 4846, 4866, 4883, 4904, 4923,
     4944, 4975, 5001, 5033, 5043, 5060, 5091, 5122, 5153, 5185,
     5211, 5243, 5270, 5301, 5332, 5363, 5381, 5413, 5445, 5477,
     5503, 5513, 5544, 5575, 5606, 5637, 5647, 5664, 5682, 5714,
     5732, 5764, 5796, 5827, 5844, 5876, 5908, 5939, 5966, 5998,
     6016, 6048, 6058, 6075, 6085, 6102, 6134, 6152, 6184, 6216,
     6236, 6268, 6300, 6326, 6357, 6367, 6382, 6402, 6415, 6442,
     6452, 6469, 6484, 6510, 6537, 6563, 6589, 6621, 6638, 6663,
     6694, 6725, 6756, 6788, 6803, 6835, 6861, 6887, 6919, 6951,

     6978, 7004, 7035, 7066, 7097, 7129, 7160, 7178, 7210, 7242,
     7274, 7300, 7326, 7357, 7367, 7398, 7429, 7460, 7491, 7506,
     7523, 7548, 7566, 7598, 7616, 7648, 7680, 7705, 7723, 7755,
     7787, 7818, 7845, 7877, 7895, 7927, 7944, 7969, 7986, 8011,
     8043, 8061, 8093, 8125, 3952, 8145, 8160, 8192, 8224, 8239,
     8271, 8289, 8304, 8331, 8363, 8394, 3931, 8420, 8447, 8465,
     4832, 8491, 8512, 8538, 8548, 8580, 8595, 8621, 8647, 8679,
     8706, 8733, 8765, 8796, 8822, 8848, 8879, 8910, 8941, 8956,
     8966, 8983, 8993, 9008, 9040, 9050, 9060, 4841, 9080, 9112,
     9130, 9147, 9174, 4860, 9205, 9232, 9242, 9268, 9294, 9317,

     9349, 9375, 9407, 9434, 9460, 9470, 9501, 9532, 9549, 9564,
     9582, 9609, 9641, 9672, 9704, 9736, 9768, 9800, 9832, 9864,
     9896
    } ;

static yyconst flex_int16_t yy_def[1422] =
    {   0,
     1189, 1189, 1188,    3, 1190, 1190, 1191, 1191, 1188,    9,
     1188,   11, 1192, 1192, 1193, 1193, 1188,   17, 1188,   19,
     1194, 1194, 1195, 1195, 1196, 1196, 1188,   27, 1188,   29,
     1188,   31, 1188,   33, 1197, 1197, 1188,   37, 1198, 1198,
     1188,   41, 1199, 1199, 1200, 1200, 1201, 1201, 1202, 1202,
     1203, 1203, 1204, 1204, 1205, 1205, 1206, 1206, 1188,   59,
     1207, 1207, 1208, 1208, 1188,   65, 1188,   67, 1209, 1209,
     1209, 1209, 1188,   73, 1210, 1210, 1211, 1211, 1212, 1212,
     1213, 1213, 1214, 1214, 1188, 1188, 1188, 1188, 1188, 1215,
     1216, 1217, 1217, 1218, 1188, 1219, 1220, 1221, 1188, 1188,

     1217, 1217, 1218, 1217, 1188, 1188, 1188, 1222, 1223, 1223,
     1223, 1224, 1188, 1188, 1188, 1225, 1226, 1188, 1188, 1188,
     1188, 1227, 1227, 1188, 1228, 1188, 1229, 1188, 1188, 1230,
     1231, 1231, 1188, 1231, 1188, 1188, 1232, 1233, 1233, 1233,
     1188, 1233, 1188, 1188, 1234, 1234, 1188, 1235, 1236, 1188,
     1188, 1237, 1188, 1188, 1188, 1238, 1188, 1188, 1188, 1239,
     1188, 1188, 1188, 1240, 1241, 1241, 1241, 1188, 1188, 1242,
     1243, 1188, 1188, 1188, 1188, 1244, 1244, 1188, 1245, 1188,
     1246, 1188, 1188, 1247, 1248, 1188, 1188, 1249, 1188, 1250,
     1188, 1188, 1188, 1188, 1251, 1188, 1252, 1188, 1253, 1188,

     1254, 1188, 1255, 1188, 1188, 1188, 1188, 1256, 1188, 1257,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1258, 1188, 1188, 1258, 1188, 1188, 1188, 1188, 1188, 1259,
     1188, 1188, 1188, 1188, 1260, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1261, 1188, 1262, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1263, 1264, 1188,
     1188, 1188, 1265, 1266, 1188, 1267, 1188, 1188, 1188, 1188,
     1188, 1268, 1188, 1269, 1188, 1188, 1188, 1270, 1188, 1188,
     1188, 1188, 1188, 1188, 1271, 1188, 1272, 1188, 1188, 1273,
     1273, 1188, 1188, 1188, 1274, 1274, 1188, 1188, 1188, 1275,

     1188, 1276, 1277, 1278, 1279, 1188, 1278, 1188, 1188, 1280,
     1278, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1281, 1274, 1281,  328,
      328,  328,  328,  328,  328, 1188, 1188, 1282, 1283, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1278, 1188, 1188, 1278, 1278,
     1188, 1188, 1285, 1188, 1286, 1287, 1286, 1188, 1188, 1286,
     1288, 1188, 1289, 1290, 1289, 1188, 1188, 1188, 1188, 1188,
     1291, 1188, 1291, 1292, 1293, 1291, 1292, 1294, 1188, 1188,
     1188, 1293, 1293, 1295, 1296, 1188, 1297, 1298, 1297, 1188,

     1188, 1297, 1299, 1299, 1300, 1300, 1299, 1188, 1301, 1302,
     1301, 1299, 1188, 1188, 1301, 1188, 1303, 1188, 1303, 1304,
     1305, 1303, 1188, 1306, 1304, 1305, 1305, 1307, 1308, 1188,
     1188, 1188, 1309, 1188, 1188, 1188, 1188, 1310, 1188, 1188,
     1188, 1188, 1311, 1188, 1312, 1313, 1312, 1188, 1188, 1312,
     1314, 1188, 1315, 1314, 1188, 1316, 1188, 1188, 1188, 1188,
     1317, 1188, 1317, 1318, 1319, 1317, 1318, 1188, 1188, 1188,
     1319, 1319, 1320, 1321, 1322, 1321, 1188, 1188, 1188, 1323,
     1188, 1188, 1188, 1188, 1324, 1188, 1188, 1188, 1325, 1188,
     1326, 1188, 1327, 1188, 1188, 1328, 1188, 1188, 1188, 1329,

     1188, 1188, 1330, 1330, 1188, 1188, 1331, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1332, 1188, 1332, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1333, 1188, 1188, 1188, 1334, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1335, 1188, 1188,
     1188, 1336, 1188, 1188, 1188, 1188, 1188, 1188, 1337, 1338,
     1337, 1188, 1188, 1339, 1340, 1339, 1188, 1188, 1341, 1188,
     1188, 1342, 1188, 1343, 1188, 1188, 1344, 1345, 1188, 1346,
     1347, 1188, 1348, 1188, 1349, 1188, 1188, 1350, 1351, 1352,
     1188, 1353, 1188, 1188, 1353, 1354, 1353, 1352, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1355, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1356, 1356, 1357, 1188, 1358,
     1358, 1358, 1188, 1188, 1359, 1358, 1358, 1358, 1360, 1361,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1188, 1188, 1188,
     1188, 1188, 1353, 1188, 1188, 1363, 1363, 1364, 1365, 1188,
     1366, 1366, 1188, 1367, 1368, 1368, 1369, 1188, 1370, 1371,
     1371, 1372, 1373, 1188, 1374, 1188, 1188, 1188, 1375, 1375,
     1376, 1377, 1378, 1379, 1379, 1188, 1188, 1380, 1381, 1382,
     1188, 1188, 1188, 1188, 1188, 1383, 1384, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1385, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1386,

     1188, 1387, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1388, 1188, 1389, 1188, 1188, 1188, 1188, 1390, 1391, 1392,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1393, 1393, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1394, 1188, 1395,
     1395, 1396, 1395, 1395, 1395, 1397, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1188, 1188, 1399, 1400, 1188, 1401, 1188,
     1401, 1188, 1402, 1403, 1403, 1404, 1188, 1188, 1188, 1188,
     1405, 1406, 1407, 1407, 1408, 1188, 1188, 1409, 1188, 1188,
     1188, 1188, 1188, 1410, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1389, 1188, 1188, 1188, 1188, 1411,
     1392, 1188, 1188, 1188, 1188, 1188, 1188, 1412, 1188, 1188,
     1188, 1188, 1413, 1413, 1395, 1395, 1188, 1395, 1398, 1397,
     1398, 1398, 1398, 1188, 1400, 1188, 1188, 1402, 1404, 1188,
     1188, 1188, 1405, 1414, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1415, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1411,

     1188, 1188, 1188, 1188, 1416, 1188, 1412, 1412, 1188, 1188,
     1395, 1395, 1188, 1395, 1398, 1398, 1398, 1398, 1400, 1188,
     1188, 1402, 1404, 1188, 1188, 1188, 1405, 1414, 1414, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1417, 1418, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1416, 1416, 1188, 1188, 1395, 1395, 1395, 1398,
     1398, 1398, 1398, 1400, 1188, 1188, 1402, 1404, 1188, 1188,

     1188, 1405, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1419, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1420, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1395, 1395, 1395, 1398, 1398, 1398,
     1398, 1400, 1188, 1188, 1402, 1404, 1188, 1188, 1188, 1405,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1421, 1188, 1188, 1188, 1395, 1395, 1188, 1397,
     1398, 1398, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1421, 1421, 1395,
     1395, 1397, 1398, 1398, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1395, 1397, 1398, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1395, 1397,
     1398, 1188, 1188, 1188, 1188, 1188, 1188, 1397, 1188, 1188,
     1188, 1397, 1188, 1188, 1397, 1188, 1397,    0, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188
    } ;

static yyconst flex_int16_t yy_nxt[10005] =
    {   0,
       87,   88,   89,   87,   88,   87,   90,   87,   91,   87,
       87,   87,   87,   87,   92,   87,   93,   94,   87,   92,
       92,   92,   87,   95,   87,   96,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   87,   98,   87,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       87,   87,   87,   87,   87,   99,  155,  155,   99,  159,
      156,  156,  159,  160,  218, 1014,  160,  100,  101,  191,
      102,  103,  191,  198,  104,  104,  105,  198,  218,  354,

       86,  241,  354,   86,  199,  526,  596,  374,  199,  527,
      206,  207,  376,  206,  241,  208,  200, 1184,  157,  157,
      200,  161,  206,  207,  161,  206,  219,  208,  596,  227,
      228,  192,  227,  254,  192,  201,  254,  288,  288,  201,
      219,  227,  228,  242,  227,  105,  106,  106,  107,  106,
      106,  106,  108,  209,  106,  106,  242,  106,  106,  106,
      211,  106,  212,  106,  110,  209,  569,  960,  110,  106,
      106,  213,  229, 1183,  961,  255,  214,  511,  255,  289,
      289,  550,  510,  215,  229,  211,  552,  212,  306,  106,
      111,  106,  231,  568,  232,  291,  213,  307,  275, 1013,

      581,  214,  216,  581,  292,  293,  305,  231,  215,  232,
      297,  298,  276,  297, 1014,  233,  106,  106,  106,  106,
      106,  106,  107,  106,  106,  106,  108,  216,  106,  106,
      233,  106,  106,  106,  234,  106,  267,  106,  110,  236,
      277,  237,  110,  106,  106,  236,  248,  237,  291,  234,
     1181,  354,  597,  299,  354,  249,  250,  292,  293,  268,
     1014,  555,  238,  106,  111,  106,  557,  620,  238,  251,
      392,  392,  392,  392,  597,  305,  515,  393,  268,  515,
     1158,  239,  426,  426,  426,  426,  516,  239,  252,  427,
      106,  106,  106,  106,  114,  114,  115,  114,  114,  114,

      114,  114,  116,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  114,  118,  114,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  114,  114,  114,  114,  117,  119,
      120,  121,  120,  120,  119,  119,  119,  122,  119,  119,
      119,  119,  119,  119,  119,  119,  123,  119,  119,  119,
      119,  124,  119,  119,  119,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  119,  126,  119,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  119,
      119,  119,  127,  125,  128,  128,  129,  128,  128,  128,
      130,  267,  128,  128,  248,  128,  128,  128,  267,  128,
      267,  128,  132,  249,  250,  275,  132,  133,  128,  279,
      502,  279, 1179,  502,  268,  503,  686,  251,  687,  276,
      280,  269,  280,  269, 1176,  366,  367,  128,  134,  128,
      367,  648,  281,  268,  281,  359,  252,  360,  360,  360,

      269,  294,  269,  305,  294, 1188,  367,  277, 1174,  407,
      367,  282,  367,  282,  128,  128,  128,  128,  128,  128,
      129,  128,  128,  128,  130,  295,  128,  128,  582,  128,
      128,  128,  367,  128,  620,  128,  132,  305, 1185,  492,
      132,  133,  128,  308,  296,  304,  309,  304,  310,  589,
      493,  596,  589,  374,  377,  378,  305,  377,  376,  398,
      399,  128,  134,  128,  399,  304,  354,  304,  304,  354,
      304,  304,  304,  596,  528,  312,  305,  389,  390,  526,
      389,  494,  596,  527,  430,  431,  399,  430,  128,  128,
      128,  128,  135,  135,  136,  135,  135,  135,  137,  379,

      135,  135,  596,  135,  135,  135, 1014,  135, 1188,  135,
      139, 1188,  616,  602,  139,  140,  141,  355, 1188, 1014,
      355,  617,  391,  306,  596,  361, 1188,  399,  361,  432,
      294,  399,  356,  294,  602,  135,  142,  135,  353,  596,
      362,  305,  521,  522,  354,  521,  353,  354,  435,  436,
     1173,  435,  374,  399,  295,  440,  441,  376,  440,  607,
     1014,  596,  135,  135,  135,  135,  135,  135,  136,  135,
      135,  135,  137,  296,  135,  135,  705,  135,  135,  135,
      608,  135,  708,  135,  139,  523, 1172,  353,  139,  140,
      141,  357,  358,  437,  357,  353,  380,  380,  380,  380,

      442,  709,  308,  706,  304,  309,  304,  310,  591,  135,
      142,  135,  381,  357,  358,  305,  357,  382,  471,  471,
      471,  471, 1168,  530,  550,  472, 1188,  531, 1142,  552,
      591,  592,  593,  532,  312,  533,  135,  135,  135,  135,
      119,  143,  144,  143,  143,  119,  119,  119,  145,  119,
      119,  119,  119,  119,  119,  119,  119,  146,  119,  119,
      119,  119,  147,  119,  119,  119,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  119,  126,  119,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,

      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      119,  119,  119,  149,  148,  150,  150,  151,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  150,  153,
      150,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  150,  150,  150,  150,  152,
      162,  162,  163,  162,  162,  162,  164,  693,  162,  162,

     1167,  162,  162,  162,  826,  162,  637,  162,  166,  613,
      637,  694,  166,  162,  162,  380,  380,  380,  380, 1165,
     1014,  380,  380,  380,  380,  446,  447,  826,  383,  727,
      447,  381,  637,  162,  167,  162,  382,  381,  386,  386,
      386,  386,  382, 1164,  614,  383,  457,  458,  654,  457,
      727,  654,  447,  629,  381,  630,  630,  630,  424,  382,
      162,  162,  162,  162,  162,  162,  163,  162,  162,  162,
      164,  615,  162,  162,  620,  162,  162,  162,  944,  162,
      609,  162,  166,  609, 1163, 1170,  166,  162,  162,  297,
      298,  459,  297,  385,  945,  380,  380,  380,  380,  416,

      416,  416,  416,  416,  416,  416,  416,  162,  167,  162,
      385,  381,  596,  534,  620,  417,  382,  388,  530,  417,
      418, 1182,  531,  620,  418, 1014,  357,  358,  532,  357,
      533, 1014,  299,  596,  162,  162,  162,  162,  168,  168,
      169,  168,  168,  168,  168,  168,  170,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  168,  172,  168,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  168,  168,
      168,  168,  171,  173,  174,  175,  174,  174,  173,  173,
      173,  176,  173,  173,  173,  173,  173,  173,  173,  173,
      177,  173,  173,  173,  173,  178,  173,  173,  173,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  173,  180,  173,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  173,  173,  173,  181,  179,  182,  182,
      183,  182,  182,  182,  182,  182,  184,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  182,  186,  182,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  182,  182,
      182,  182,  185,   86,   86,  187,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,   86,  189,   86,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,   86,   86,   86,   86,  188,  193,  193,
      194,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  193,  196,  193,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  193,  193,
      193,  193,  195,   86,   86,  202,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,   86,  204,   86,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,   86,   86,   86,   86,  203,  220,  221,
      222,  220,  221,  220,  220,  220,  220,  220,  220,  223,

      220,  220,  220,  220,  368,  369,  220,  368, 1162,  408,
      220,  220,  220,  220, 1188,  447,  594,  550,  408,  447,
     1188,  367,  552,  368,  369,  367,  368,  408,  595,  410,
      411,  220,  225,  220,  411,  723,  408,  594,  555,  468,
      469,  447,  468,  557, 1161,  477,  478,  367,  477,  370,
      595,  609,  482,  483,  609,  482,  411,  723,  220,  220,
      220,  220,  220,  220,  221,  222,  220,  221,  220,  220,
      220,  220,  220,  220,  223,  220,  220,  220,  220,  400,
      401,  220,  400, 1160,  470,  220,  220,  220,  220,  581,
      479, 1114,  581, 1188,  620, 1188,  399,  484,  555,  635,

      399,  623,  635,  557, 1188,  411,  220,  225,  220,  411,
      304, 1188,  304,  304, 1156,  304,  304,  304, 1155, 1154,
     1153,  305,  399,  305,  402,  377,  378, 1152,  377,  389,
      390,  411,  389,  220,  220,  220,  220,  220,  243,  243,
      244,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  243,  246,  243,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  243,  243,
      243,  243,  245,  256,  256,  257,  256,  256,  256,  256,
      256,  258,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  256,  260,  256,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  256,  256,  256,  256,  259,  261,  261,
      262,  261,  261,  261,  261,  261,  263,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  261,  265,  261,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  261,  261,
      261,  261,  264,  270,  270,  271,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  270,  273,  270,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  270,  270,  270,  270,  272,  283,  283,
      284,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  412,  965, 1151,
      283,  283,  283,  283,  423,  416,  416,  423, 1188,  411,
     1150, 1149,  966,  411,  424,  408,  460,  460,  460,  460,
      417,  283,  286,  283,  731,  418,  416,  416,  416,  416,
     1148,  502,  461,  419,  502,  411,  503,  462,  486,  487,

     1147,  486,  417,  497,  498,  731,  497,  418,  283,  283,
      283,  283,  283,  283,  284,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283, 1146, 1145, 1137,  283,  283,  283,  283,  460,  460,
      460,  460,  726,  488,  413,  414,  496,  413,  499, 1188,
      460,  460,  460,  460,  461,  283,  286,  283,  421,  462,
     1188,  411,  620, 1136,  726,  411,  461, 1188, 1135,  366,
      367,  462,  512,  513,  367,  512,  642,  642,  642,  642,
     1187, 1134,  283,  283,  283,  283,  313,  411, 1132,  415,
      422,  422,  422,  422, 1131,  515,  367,  419,  515,  314,

      460,  460,  460,  460,  730,  516,  417,  463,  646,  315,
      316,  418,  646,  620,  317,  318,  461,  514,  492,  319,
      320,  462,  321,  322,  518,  519,  730,  518, 1178,  493,
      315,  316, 1130, 1129,  646,  317,  318,  448,  449,  830,
      448,  319,  320,  323,  324,  321,  322,  325,  325,  325,
      325, 1128,  355, 1188,  447,  355,  326, 1127,  447, 1126,
      494,  830,  421,  325,  325,  327, 1125,  628,  609,  520,
     1124,  609,  465,  353, 1123, 1116,  452,  452,  452,  452,
      447,  651,  450,  453,  329,  651,  400,  401,  330,  400,
      331,  332,  333, 1115,  454,  454,  454,  455, 1112, 1188,

      535,  536, 1188,  535,  334, 1111,  298,  651,  335, 1188,
      336,  620,  337,  338,  325,  325,  325,  325,  466,  466,
      466,  466,  353,  326,  621,  463,  495,  495,  495,  495,
      325,  325,  329,  361,  461, 1110,  361,  539,  540,  462,
      539, 1109,  495,  495,  496,  537,  543,  544,  362,  543,
     1108,  327,  660,  341,  353,  342,  660,  343,  344,  345,
     1107,  546,  547,  495,  546,  297,  298,  609,  297,  609,
      609,  346,  609,  609,  732,  347,  609,  336,  660,  337,
      338,  348,  541, 1106,  348,  609,  598, 1105,  609,  598,
      465,  545,  495,  349,  349,  732,  350,  351, 1104,  823,

      352,  352,  353,  353,  736,  295,  548,  736,  299,  599,
      620,  600,  620, 1103,  982,  359,  620,  360,  360,  360,
      823, 1188,  367,  305,  296,  601,  367,  624,  620,  827,
      609,  622,  600,  609,  627,  625,  982,  613,  380,  380,
      380,  380,  413,  414,  626,  413,  609,  601,  367,  609,
      827,  353,  403,  403,  381,  403,  403,  403,  404,  382,
      403,  403, 1102,  403,  403,  403, 1101,  403,  355,  403,
      406,  355,  614,  620,  406,  403,  407,  631,  632,  361,
      631,  598,  361,  362,  598,  430,  431,  361,  430,  353,
      361, 1052,  633, 1100,  362,  403,  406,  403,  634,  615,

      353,  305,  628, 1099,  599,  366,  367, 1098,  353,  609,
      367,  737,  609, 1052,  386,  386,  386,  386,  596, 1097,
      904,  383,  403,  403,  403,  403,  325,  325,  325,  325,
      381, 1096,  367,  435,  436,  382,  435,  635,  353,  596,
      635,  904,  325,  325,  576,  638,  737,  634, 1095,  353,
     1094, 1188, 1188, 1188, 1188, 1093,  522,  353, 1188,  380,
      380,  380,  380,  325, 1091,  440,  441, 1188,  440,  740,
      332,  333, 1188,  737, 1090,  381,  392,  392,  392,  392,
      382,  388,  596,  393,  448,  449,  385,  448, 1089,  336,
     1088,  337,  338,  325,  325,  325,  325, 1087,  380,  380,

      380,  380, 1086,  596, 1085,  392,  392,  392,  392,  325,
      325,  325,  393, 1084,  381,  386,  386,  386,  386,  382,
      388,  729,  383, 1188,  729, 1188, 1188, 1188, 1188, 1083,
      576,  381, 1188, 1082,  398,  399,  382,  332,  333,  399,
      426,  426,  426,  426,  599, 1080, 1014,  427,  426,  426,
      426,  426, 1188,  399, 1079,  427,  336,  399,  337,  338,
      583,  399, 1078,  583, 1077,  583,  583,  583,  583,  583,
      583,  583,  584,  583,  585,  583,  585,  586,  583,  399,
      408, 1076,  583,  583,  583,  588, 1075,  385,  398,  399,
     1074,  410,  411,  399,  457,  458,  411,  457,  408,  468,

      469, 1188,  468,  583,  583,  583, 1073,  477,  478,  408,
      477,  609, 1188,  411,  609,  399, 1072,  411,  411, 1188,
      410,  411, 1071,  482,  483,  411,  482,  408,  647, 1069,
      583,  583,  583,  583,  583,  609, 1068,  609,  609,  411,
      609, 1188, 1188, 1188, 1188, 1067, 1064,  411,  416,  416,
      416,  416,  486,  487, 1063,  486, 1054, 1188, 1188, 1188,
      652, 1053,  906,  739,  417,  422,  422,  422,  422,  418,
     1051, 1050,  419, 1188, 1188, 1188, 1188, 1049, 1188, 1048,
     1188,  417,  423,  416,  416,  423,  418,  745, 1047, 1188,
      446,  447,  424, 1046, 1188,  447,  497,  498,  417,  497,

     1045, 1044,  609,  418, 1188,  609, 1188, 1188,  348, 1043,
     1042,  348, 1188, 1188, 1188, 1188, 1041,  447, 1040, 1188,
      349,  349, 1039,  350,  351, 1188,  447,  352,  352,  353,
      447, 1038,  295,  422,  422,  422,  422,  421, 1037, 1036,
      419,  446,  447, 1035, 1034, 1188,  447,  512,  513,  417,
      512,  296,  447, 1033,  418,  423,  416,  416,  423,  471,
      471,  471,  471, 1031,  743,  424,  472,  635,  447, 1030,
      635,  417,  452,  452,  452,  452,  418, 1027,  353,  403,
      403,  661,  403,  403,  403,  648,  609,  403,  403,  609,
      403,  403,  403,  455,  403,  609,  649,  406,  609, 1026,

     1025,  406,  403,  407,  629,  421,  630,  630,  630,  423,
      416,  416,  423,  452,  452,  452,  452, 1024,  812,  424,
      453,  812,  403,  406,  403,  417,  460,  460,  460,  460,
      418,  454,  454,  454,  455,  741,  471,  471,  471,  471,
     1023, 1022,  461,  472,  744,  518,  519,  462,  518,  403,
      403,  403,  403,  403,  403, 1021,  403,  403,  403,  648,
      822,  403,  403,  822,  403,  403,  403, 1020,  403,  654,
      403,  406,  654, 1019, 1018,  406,  403,  403, 1014,  424,
     1017,  452,  452,  452,  452, 1016,  535,  536,  453,  535,
     1015, 1012,  460,  460,  460,  460,  403,  406,  403,  454,

      454,  454,  455,  539,  540, 1011,  539, 1010,  461,  452,
      452,  452,  452,  462,  543,  544,  453,  543,  521,  522,
     1009,  521, 1008,  403,  403,  403,  403,  664,  664,  664,
      455,  466,  466,  466,  466, 1007, 1006, 1005,  463, 1188,
     1188, 1188, 1188, 1004, 1003, 1001, 1188,  461,  460,  460,
      460,  460,  462, 1000,  999, 1188,  466,  466,  466,  466,
     1188,  523,  996,  463,  461,  546,  547,  609,  546,  462,
      609,  995,  461, 1188, 1188, 1188, 1188,  462,  986,  736,
     1188,  609,  736,  985,  609,  654,  737,  829,  654,  981,
      609,  366,  637,  609,  736,  424,  637,  736,  609, 1188,

      637,  609,  729,  465,  637,  729,  609,  980,  719,  609,
      620, 1188,  609,  609,  609,  609,  609,  609,  637,  748,
      799,  737,  979,  799,  620,  599,  637,  978,  465,  583,
      750,  977,  583,  620,  583,  583,  583,  583,  583,  583,
      583,  584,  583,  585,  583,  585,  720,  583,  737,  620,
      749,  583,  583,  583,  588,  620,  620,  620,  976,  835,
      747,  752,  631,  632,  753,  631,  631,  632,  828,  631,
      975,  828,  583,  721,  583,  751,  974,  754,  800,  366,
      367,  755,  812,  634,  367,  812,  973,  634,  972,  631,
      632,  829,  631,  631,  632,  609,  631,  971,  609,  583,

      583,  583,  583,  583,  756,  970,  367,  969,  755,  968,
      634,  398,  646,  305,  634,  967,  646,  757,  759,  759,
      759,  759,  761,  761,  761,  761, 1188,  646,  398,  399,
      964,  646,  634,  399,  446,  660,  634,  609,  646,  660,
      609,  760, 1188,  660,  308,  760,  304,  660,  304,  821,
      963,  609,  962,  646,  609,  399,  959,  305,  739,  634,
      958,  660,  834,  634,  957,  834,  763,  403,  403,  660,
      403,  403,  403,  648,  609,  403,  403,  609,  403,  403,
      403,  408,  403,  609,  403,  765,  609,  956,  954,  765,
      403,  403,  410,  651,  953,  905,  739,  651,  905,  408,

      775,  775,  775,  775, 1188,  836,  609,  453,  952,  609,
      403,  765,  403,  408,  951, 1188,  651,  620,  906,  651,
      651,  455, 1188,  908,  410,  411,  908,  446,  447,  411,
      950,  408,  447,  609,  838,  841,  609,  403,  403,  403,
      403,  609,  651,  947,  609,  948,  829,  946,  949,  620,
      609,  411,  609,  609,  447,  609,  452,  452,  452,  452,
      943,  942,  766,  772,  839,  771,  452,  452,  452,  452,
      941,  940,  939,  453,  773,  773,  773,  455,  759,  759,
      759,  759,  938,  911,  664,  664,  664,  455,  452,  452,
      452,  452,  308,  620,  304,  453,  304,  821,  937,  912,

      987,  760,  936,  935,  842,  305,  664,  664,  664,  455,
      833,  834,  833,  833,  834,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  833,  833,  833,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      833,  833,  833,  833,  833,  833,  834,  833,  833,  834,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,

      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  609,  631,  632,  609,  631,  609,  609,  609,  609,
      609,  609,  631,  632,  934,  631,  933,  754,  833,  840,
      833, 1032,  932,  634, 1032,  609,  931,  844,  609,  366,
      367,  930,  984,  634,  367,  984,  609,  631,  632,  609,
      631,  926,  925,  924,  620,  833,  833,  833,  833,  833,
      620,  620,  756,  921,  609,  906,  367,  609,  634,  843,
      914,  305,  920,  913,  748,  408,  748,  761,  761,  761,
      761,  845,  634,  398,  399,  910,  410,  411,  399,  620,
      909,  411,  634,  408,  446,  447,  915,  903,  988,  447,

      760,  775,  775,  775,  775,  902,  901,  620,  453,  609,
      399,  719,  609,  411,  916,  609,  899,  634,  609,  366,
      367,  447,  455,  898,  367,  848,  403,  403,  849,  403,
      403,  403,  648,  897,  403,  403,  853,  403,  403,  403,
      571,  403,  908,  649,  765,  908,  367,  896,  765,  403,
      407,  895,  620,  919,  452,  452,  452,  452,  894,  984,
      893,  772,  984,  366,  367,  829,  892,  917,  367,  403,
      765,  403,  773,  773,  773,  455,  865,  866,  989,  891,
      890,  867,  906,  609,  868,  869,  609,  889,  609,  870,
      367,  609,  871,  872,  994,  873,  403,  403,  403,  403,

      403,  403,  888,  403,  403,  403,  648,  609,  403,  403,
      609,  403,  403,  403,  887,  403, 1133,  403,  765, 1133,
      886,  885,  765,  403,  403,  884,  620,  883,  452,  452,
      452,  452,  882, 1113, 1055,  772, 1113,  918,  631,  632,
      881,  631,  880,  403,  765,  403,  773,  773,  773,  455,
      620,  879,  609,  754,  990,  609, 1114, 1166, 1175,  634,
     1166, 1175,  609,  609,  609,  609,  609,  609,  878,  877,
      403,  403,  403,  403,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,

      398,  399,  446,  447,  408,  399,  620,  447,  634,  876,
      875,  991, 1056, 1118, 1057,  410,  411,  833,  833,  833,
      411,  609,  408,  609,  609,  609,  609,  399,  609,  447,
      874,  864,  398,  399,  922,  609,  927,  399,  609,  863,
      609,  862,  411,  609,  833,  833,  833,  833,  833,  923,
      452,  452,  452,  452,  861,  609,  860,  772,  609,  399,
      859,  408, 1177,  997,  620, 1177,  620,  858,  928,  928,
      928,  455,  410,  411,  857,  446,  447,  411,  620,  408,
      447, 1059,  739,  620,  992,  609,  993,  475,  609,  452,
      452,  452,  452,  856,  609,  855,  772,  609,  620,  411,

      852, 1058,  447,  998,  851, 1060, 1002,  928,  928,  928,
      455,  452,  452,  452,  452,  366,  367,  850,  772,  847,
      367,  398,  399,  846,  609,  408,  399,  609,  620,  928,
      928,  928,  455,  620,  837, 1061,  410,  411,  832,  831,
      599,  411,  367,  408,  446,  447,  825,  824,  399,  447,
     1119,  298,  609, 1119,  819,  609,  818, 1117,  609, 1139,
     1062,  609, 1139,  411,  366,  367, 1065,  620,  408,  367,
      817,  447,  398,  399,  816,  609,  571,  399,  609,  410,
      411, 1066, 1114,  814,  411,  609,  408, 1121,  609, 1070,
      813,  367,  709, 1120,  811,  620,  810,  446,  447,  399,

     1139,  620,  447, 1139, 1119,  298,  411, 1119,  609,  609,
      809,  609,  609, 1122,  609,  748,  609,  609,  609,  609,
      808,  609,  807, 1114,  447, 1140,  609,  609,  609,  609,
      609,  609, 1180, 1177, 1177, 1180, 1177, 1177, 1180, 1186,
      806, 1180, 1186, 1141,  805,  297,  298,  299,  297,  804,
      803,  620,  620,  738,  802,  738,  738,  738, 1143,  801,
      798,  620, 1157,  739, 1159,  797,  711, 1144,  796,  620,
      794,  620,  793,  792,  711,  748,  620,  711,  711,  791,
      790,  789,  788, 1169, 1171,  787,  786,  785, 1120,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  300,  300,  783,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  303,  746,  711,  746,  746,  746,  782,
      781,  780,  779,  711,  475,  777,  711,  711,  303,  776,
      303,  303,  303,  770,  769,  768,  767,  303,  304,  388,
      304,  304,  738,  304,  738,  738,  738,  304,  304,  762,
      304,  304,  304,  311,  758,  311,  311,  311,  311,  735,

      311,  734,  733,  725,  311,  311,  311,  311,  311,  311,
      328,  328,  328,  724,  722, 1188,  305,  305,  328,  305,
      719,  579,  717,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  716,  328,  328,  339,  715,  339,  339,  714,
      339,  571,  712,  710,  339,  339,  707,  339,  339,  339,
      340,  340,  340,  704,  703,  555,  702,  701,  340,  550,
      700,  699,  698,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  697,  340,  340,  363,  363,  696,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  365,  695,  692,
      691,  690,  689,  365,  688,  365,  365,  365,  365,  365,
      685,  524,  365,  365,  365,  365,  365,  365,  684,  683,
      682,  681,  365,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  373,  680,  373,  373,  373,
      505,  505,  679,  678,  373,  375,  676,  375,  375,  499,
      494,  675,  375,  674,  375,  375,  375,  673,  672,  481,
      671,  375,  384,  384,  384,  384,  475,  669,  384,  475,

      667,  461,  666,  663,  444,  658,  384,  439,  657,  384,
      434,  656,  417,  384,  648,  384,  384,  384,  648,  648,
      396,  384,  384,  387,  387,  387,  387,  388,  643,  381,
      640,  374,  639,  372,  364,  618,  612,  387,  611,  387,
      387,  387,  610,  608,  387,  605,  387,  387,  387,  604,
      603,  590,  305,  387,  394,  394,  394,  394,  305,  579,
      394,  301,  577,  574,  572,  571,  568,  566,  565,  563,
      561,  560,  558,  553,  524,  394,  510,  394,  394,  394,
      509,  508,  506,  505,  394,  395,  395,  501,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  397,  494,  490,
      481,  475,  461,  397,  444,  397,  397,  397,  397,  397,
      439,  434,  397,  397,  397,  397,  397,  397,  417,  396,
      396,  381,  397,  405,  405,  372,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  409,  409,  364,  305,  302,
      301, 1188,  409,  113,  409,  409,  409,  409,  409,  113,
      409,  409,  409,  409,  409,  409,  409, 1188, 1188, 1188,

     1188,  409,  420,  420,  420,  420, 1188, 1188,  420, 1188,
     1188, 1188, 1188, 1188, 1188, 1188,  420, 1188, 1188,  420,
     1188, 1188, 1188,  420, 1188,  420,  420,  420, 1188, 1188,
     1188,  420,  420,  425,  425,  425,  425, 1188, 1188, 1188,
     1188,  425, 1188, 1188, 1188, 1188, 1188,  425, 1188,  425,
      425, 1188, 1188, 1188,  425, 1188,  425,  425,  425, 1188,
     1188, 1188, 1188,  425,  428,  428,  428,  428, 1188, 1188,
      428, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188,  428, 1188,  428,  428,  428,
     1188, 1188, 1188, 1188,  428,  429, 1188, 1188,  429, 1188,

     1188, 1188, 1188,  429, 1188,  429,  429,  429, 1188, 1188,
     1188, 1188,  429,  433,  433, 1188,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  438,  438, 1188,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  443,  443, 1188,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  445,
     1188, 1188, 1188, 1188, 1188,  445, 1188,  445,  445,  445,
      445,  445, 1188, 1188,  445,  445,  445,  445,  445,  445,
     1188, 1188, 1188, 1188,  445,  451, 1188,  451,  451,  451,
     1188, 1188, 1188, 1188,  451,  456,  456,  456,  456, 1188,
     1188,  456, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188,  456,  456, 1188, 1188, 1188,  456, 1188,  456,  456,
      456, 1188, 1188, 1188, 1188,  456,  464,  464,  464,  464,
     1188, 1188,  464, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
      464, 1188, 1188,  464, 1188, 1188, 1188,  464, 1188,  464,

      464,  464, 1188, 1188, 1188,  464,  464,  467,  467,  467,
      467, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188,  467, 1188,  467,  467, 1188, 1188, 1188,  467, 1188,
      467,  467,  467, 1188, 1188, 1188, 1188,  467,  473,  473,
      473,  473, 1188, 1188,  473, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,  473,
     1188,  473,  473,  473, 1188, 1188, 1188, 1188,  473,  474,
     1188,  474,  474,  474, 1188, 1188, 1188, 1188,  474,  476,
     1188,  476, 1188, 1188, 1188, 1188,  476, 1188,  476,  476,
      476, 1188, 1188, 1188, 1188,  476,  480,  480, 1188,  480,

     1188, 1188, 1188, 1188,  480, 1188,  480,  480,  480, 1188,
     1188, 1188, 1188,  480,  485,  485, 1188,  485,  485,  485,
      485,  485,  485,  485,  485, 1188,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485, 1188,  485,  485,
      485,  485,  485,  485,  485,  485,  489, 1188, 1188,  489,
     1188, 1188, 1188, 1188,  489, 1188,  489,  489,  489, 1188,
     1188, 1188, 1188,  489,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491, 1188,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  493,  493, 1188,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493, 1188,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  495,  495,
     1188,  495, 1188,  495,  495,  495, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188,  495,  495,  495, 1188,
      495,  495, 1188, 1188, 1188, 1188, 1188,  495,  500, 1188,
     1188,  500, 1188, 1188, 1188, 1188,  500, 1188,  500,  500,
      500, 1188, 1188, 1188, 1188,  500,  504,  504, 1188,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,

      504,  504,  504,  504,  504,  504,  504,  504,  507,  507,
     1188,  507, 1188,  507,  507,  507,  507,  507,  507, 1188,
      507,  507,  507,  507, 1188,  507,  507,  507,  507, 1188,
      507, 1188,  507,  507,  507,  507,  507,  507,  507,  507,
      517, 1188, 1188,  517, 1188, 1188, 1188, 1188,  517, 1188,
     1188, 1188, 1188,  517,  517, 1188,  517, 1188, 1188, 1188,
     1188,  517, 1188,  517,  517,  517,  525,  525, 1188,  525,
     1188,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525, 1188,  525, 1188,
      525,  525,  525,  525,  525,  525,  525,  525,  529,  529,

     1188,  529, 1188,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529, 1188,
      529, 1188,  529,  529,  529,  529,  529,  529,  529,  529,
      538, 1188, 1188,  538, 1188, 1188, 1188, 1188,  538, 1188,
      538,  538,  538, 1188, 1188, 1188, 1188,  538,  542,  542,
     1188,  542,  542,  542,  542,  542,  542, 1188, 1188,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542, 1188,
      542, 1188,  542,  542,  542,  542,  542,  542,  542,  542,
      549, 1188,  549,  549,  549, 1188, 1188, 1188, 1188,  549,
      551, 1188,  551,  551, 1188, 1188, 1188,  551, 1188,  551,

      551,  551, 1188, 1188, 1188, 1188,  551,  554, 1188,  554,
      554,  554, 1188, 1188, 1188, 1188,  554,  556, 1188,  556,
      556, 1188, 1188, 1188,  556, 1188,  556,  556,  556, 1188,
     1188, 1188, 1188,  556,  559,  559, 1188,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559, 1188,  559, 1188,  559,  559,
      559,  559,  559,  559,  559,  559,  562, 1188, 1188,  562,
     1188, 1188, 1188, 1188,  562, 1188,  562,  562,  562, 1188,
     1188, 1188, 1188,  562,  564,  564, 1188,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564, 1188,  564,

      564,  564,  564,  564,  564,  564,  564, 1188,  564,  564,
      564,  564,  564,  564,  564,  564,  567,  567, 1188,  567,
      567,  567,  567,  567,  567,  567,  567, 1188,  567,  567,
      567,  567,  567,  567,  567,  567,  567, 1188,  567, 1188,
      567,  567,  567,  567,  567,  567,  567,  567,  570, 1188,
      570,  570,  570,  570,  570, 1188, 1188, 1188,  570, 1188,
      570,  570,  570, 1188, 1188, 1188, 1188,  570,  573,  573,
     1188,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573, 1188,  573,  573,  573,  573,  573,  573,  573,  573,

      575,  575,  575,  575,  575,  575,  575,  575,  575, 1188,
     1188,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  328,  328,  328, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188,  328,  328,  328,  328,  328,
      328,  328,  328,  328, 1188,  328,  328,  300,  300, 1188,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  303,
     1188,  303,  303,  303, 1188, 1188, 1188, 1188,  303,  578,

      578, 1188, 1188, 1188,  578, 1188,  578,  578,  578, 1188,
     1188, 1188, 1188,  578,  304, 1188,  304,  304, 1188,  304,
     1188, 1188, 1188,  304,  304, 1188,  304,  304,  304,  580,
     1188, 1188,  580, 1188, 1188, 1188, 1188,  580, 1188,  580,
      580,  580,  587, 1188, 1188,  587, 1188,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  606, 1188,  606,  606,  606, 1188,
     1188, 1188,  606,  619, 1188, 1188, 1188, 1188, 1188, 1188,
     1188,  619, 1188,  619,  619,  619,  339, 1188,  339,  339,

     1188,  339, 1188, 1188, 1188,  339,  339, 1188,  339,  339,
      339,  340, 1188, 1188,  340, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188,  340,  340,  340,  340,  340,  363,  363, 1188,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  365,
     1188, 1188, 1188, 1188, 1188,  365, 1188,  365,  365,  365,
      365,  365, 1188, 1188,  365,  365,  365,  365,  365,  365,
     1188, 1188, 1188, 1188,  365,  636, 1188, 1188, 1188, 1188,

     1188,  636, 1188,  636, 1188,  636,  636,  636, 1188, 1188,
      636,  636,  636,  636,  636,  636, 1188, 1188, 1188, 1188,
      636,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  375, 1188,  375,  375, 1188, 1188, 1188,
      375, 1188,  375,  375,  375, 1188, 1188, 1188, 1188,  375,
      373, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188,  373, 1188,  373,  373,  373,
     1188, 1188, 1188, 1188,  373,  384,  384,  384,  384, 1188,

     1188,  384, 1188, 1188, 1188, 1188, 1188, 1188, 1188,  384,
     1188, 1188,  384, 1188, 1188, 1188,  384, 1188,  384,  384,
      384, 1188, 1188, 1188,  384,  384,  387,  387,  387,  387,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
      387, 1188,  387,  387,  387, 1188, 1188,  387, 1188,  387,
      387,  387, 1188, 1188, 1188, 1188,  387,  394,  394,  394,
      394, 1188, 1188,  394, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,  394, 1188,
      394,  394,  394, 1188, 1188, 1188, 1188,  394,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  641,  641,  641, 1188,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      644, 1188,  644, 1188, 1188,  644, 1188,  644,  644,  644,
     1188, 1188, 1188, 1188,  644,  395,  395, 1188,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  397, 1188, 1188,
     1188, 1188, 1188,  397, 1188,  397,  397,  397,  397,  397,
     1188, 1188,  397,  397,  397,  397,  397,  397, 1188, 1188,
     1188, 1188,  397,  645, 1188, 1188, 1188, 1188, 1188,  645,

     1188,  645, 1188,  645,  645,  645, 1188, 1188,  645,  645,
      645,  645,  645,  645, 1188, 1188, 1188, 1188,  645,  403,
      403, 1188,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  405,  405, 1188,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  409,  409, 1188, 1188, 1188, 1188, 1188,
      409, 1188,  409,  409,  409,  409,  409, 1188,  409,  409,

      409,  409,  409,  409,  409, 1188, 1188, 1188, 1188,  409,
      650, 1188, 1188, 1188, 1188, 1188,  650, 1188,  650, 1188,
      650,  650,  650, 1188, 1188,  650,  650,  650,  650,  650,
      650, 1188, 1188, 1188, 1188,  650,  420,  420,  420,  420,
     1188, 1188,  420, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
      420, 1188, 1188,  420, 1188, 1188, 1188,  420, 1188,  420,
      420,  420, 1188, 1188, 1188,  420,  420,  425,  425,  425,
      425, 1188, 1188, 1188, 1188,  425, 1188, 1188, 1188, 1188,
     1188,  425, 1188,  425,  425, 1188, 1188, 1188,  425, 1188,
      425,  425,  425, 1188, 1188, 1188, 1188,  425,  428,  428,

      428,  428, 1188, 1188,  428, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,  428,
     1188,  428,  428,  428, 1188, 1188, 1188, 1188,  428,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653, 1188,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  655, 1188, 1188,  655, 1188, 1188, 1188, 1188,  655,
     1188, 1188, 1188, 1188, 1188, 1188, 1188,  655, 1188, 1188,
     1188, 1188,  655, 1188,  655,  655,  655, 1188, 1188, 1188,
     1188,  655,  429, 1188, 1188,  429, 1188, 1188, 1188, 1188,

      429, 1188,  429,  429,  429, 1188, 1188, 1188, 1188,  429,
      433,  433, 1188,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  438,  438, 1188,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  443,  443, 1188,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  445, 1188, 1188, 1188,
     1188, 1188,  445, 1188,  445,  445,  445,  445,  445, 1188,
     1188,  445,  445,  445,  445,  445,  445, 1188, 1188, 1188,
     1188,  445,  659, 1188, 1188, 1188, 1188, 1188,  659, 1188,
      659, 1188,  659,  659,  659, 1188, 1188,  659,  659,  659,
      659,  659,  659, 1188, 1188, 1188, 1188,  659,  456,  456,
      456,  456, 1188, 1188,  456, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188,  456,  456, 1188, 1188, 1188,  456,
     1188,  456,  456,  456, 1188, 1188, 1188, 1188,  456,  662,
     1188,  662,  662,  662, 1188, 1188, 1188, 1188,  662,  665,

      665,  665,  665, 1188, 1188,  665, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188,  665,  665, 1188, 1188, 1188,
      665, 1188,  665,  665,  665, 1188, 1188, 1188, 1188,  665,
      464,  464,  464,  464, 1188, 1188,  464, 1188, 1188, 1188,
     1188, 1188, 1188, 1188,  464, 1188, 1188,  464, 1188, 1188,
     1188,  464, 1188,  464,  464,  464, 1188, 1188, 1188,  464,
      464,  467,  467,  467,  467, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188,  467, 1188,  467,  467, 1188,
     1188, 1188,  467, 1188,  467,  467,  467, 1188, 1188, 1188,
     1188,  467,  473,  473,  473,  473, 1188, 1188,  473, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188,  473, 1188,  473,  473,  473, 1188, 1188,
     1188, 1188,  473,  668, 1188, 1188, 1188, 1188,  668, 1188,
      668,  668,  668, 1188, 1188, 1188, 1188,  668,  476, 1188,
      476, 1188, 1188, 1188, 1188,  476, 1188,  476,  476,  476,
     1188, 1188, 1188, 1188,  476,  670, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
      670, 1188,  670,  670,  670, 1188, 1188, 1188, 1188,  670,
      480,  480, 1188,  480, 1188, 1188, 1188, 1188,  480, 1188,
      480,  480,  480, 1188, 1188, 1188, 1188,  480,  485,  485,

     1188,  485,  485,  485,  485,  485,  485,  485,  485, 1188,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485, 1188,  485,  485,  485,  485,  485,  485,  485,  485,
      489, 1188, 1188,  489, 1188, 1188, 1188, 1188,  489, 1188,
      489,  489,  489, 1188, 1188, 1188, 1188,  489,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491, 1188,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      493,  493, 1188,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493, 1188,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  677, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188,  677, 1188,  677,
      677,  677, 1188, 1188, 1188, 1188,  677,  500, 1188, 1188,
      500, 1188, 1188, 1188, 1188,  500, 1188,  500,  500,  500,
     1188, 1188, 1188, 1188,  500,  504,  504, 1188,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  507,  507, 1188,
      507, 1188,  507,  507,  507,  507,  507,  507, 1188,  507,

      507,  507,  507, 1188,  507,  507,  507,  507, 1188,  507,
     1188,  507,  507,  507,  507,  507,  507,  507,  507,  517,
     1188, 1188,  517, 1188, 1188, 1188, 1188,  517, 1188, 1188,
     1188, 1188,  517,  517, 1188,  517, 1188, 1188, 1188, 1188,
      517, 1188,  517,  517,  517,  525,  525, 1188,  525, 1188,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525, 1188,  525, 1188,  525,
      525,  525,  525,  525,  525,  525,  525,  529,  529, 1188,
      529, 1188,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529, 1188,  529,

     1188,  529,  529,  529,  529,  529,  529,  529,  529,  538,
     1188, 1188,  538, 1188, 1188, 1188, 1188,  538, 1188,  538,
      538,  538, 1188, 1188, 1188, 1188,  538,  542,  542, 1188,
      542,  542,  542,  542,  542,  542, 1188, 1188,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542, 1188,  542,
     1188,  542,  542,  542,  542,  542,  542,  542,  542,  551,
     1188,  551,  551, 1188, 1188, 1188,  551, 1188,  551,  551,
      551, 1188, 1188, 1188, 1188,  551,  549, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188,  549, 1188,  549,  549,  549, 1188, 1188, 1188, 1188,

      549,  556, 1188,  556,  556, 1188, 1188, 1188,  556, 1188,
      556,  556,  556, 1188, 1188, 1188, 1188,  556,  554, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188,  554, 1188,  554,  554,  554, 1188, 1188,
     1188, 1188,  554,  559,  559, 1188,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559, 1188,  559, 1188,  559,  559,  559,
      559,  559,  559,  559,  559,  562, 1188, 1188,  562, 1188,
     1188, 1188, 1188,  562, 1188,  562,  562,  562, 1188, 1188,
     1188, 1188,  562,  564,  564, 1188,  564,  564,  564,  564,

      564,  564,  564,  564,  564,  564,  564, 1188,  564,  564,
      564,  564,  564,  564,  564,  564, 1188,  564,  564,  564,
      564,  564,  564,  564,  564,  567,  567, 1188,  567,  567,
      567,  567,  567,  567,  567,  567, 1188,  567,  567,  567,
      567,  567,  567,  567,  567,  567, 1188,  567, 1188,  567,
      567,  567,  567,  567,  567,  567,  567,  570, 1188,  570,
      570,  570,  570,  570, 1188, 1188, 1188,  570, 1188,  570,
      570,  570, 1188, 1188, 1188, 1188,  570,  713, 1188, 1188,
     1188, 1188,  713, 1188,  713,  713,  713, 1188, 1188, 1188,
     1188,  713,  573,  573, 1188,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573, 1188,  573,  573,  573,  573,
      573,  573,  573,  573,  575,  575,  575,  575,  575,  575,
      575,  575,  575, 1188, 1188,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  578,  578, 1188, 1188,
     1188,  578, 1188,  578,  578,  578, 1188, 1188, 1188, 1188,
      578,  718,  718, 1188,  718,  718,  718,  718, 1188,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  580,  580, 1188,  580, 1188, 1188, 1188,
     1188,  580, 1188,  580,  580,  580,  304, 1188,  304,  304,
     1188,  304, 1188, 1188, 1188,  304,  304, 1188,  304,  304,
      304,  587, 1188, 1188,  587, 1188,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  728,  728, 1188,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  606, 1188, 1188,  606, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188,  606, 1188,  606,  606,
      606,  328, 1188, 1188,  328, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188,  328, 1188,  328,  328,  328,  742,  742, 1188,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742, 1188,  742,  742,  619,
     1188, 1188, 1188, 1188, 1188, 1188, 1188,  619, 1188,  619,
      619,  619,  340, 1188, 1188,  340, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188,  340,  340,  340,  340,  340,  636, 1188,
     1188, 1188, 1188, 1188,  636, 1188,  636,  636,  636,  636,
      636, 1188, 1188,  636,  636,  636,  636,  636,  636, 1188,
     1188, 1188, 1188,  636,  365, 1188, 1188, 1188, 1188, 1188,
      365, 1188,  365,  365,  365,  365,  365, 1188, 1188,  365,
      365,  365,  365,  365,  365, 1188, 1188, 1188, 1188,  365,
      373, 1188,  373,  373,  373, 1188, 1188, 1188, 1188,  373,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  644, 1188,  644, 1188, 1188,  644, 1188,  644,
      644,  644, 1188, 1188, 1188, 1188,  644,  645, 1188, 1188,
     1188, 1188, 1188,  645, 1188,  645,  645,  645,  645,  645,
     1188, 1188,  645,  645,  645,  645,  645,  645, 1188, 1188,
     1188, 1188,  645,  397, 1188, 1188, 1188, 1188, 1188,  397,
     1188,  397,  397,  397,  397,  397, 1188, 1188,  397,  397,
      397,  397,  397,  397, 1188, 1188, 1188, 1188,  397,  764,
      764, 1188,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,

      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  650,  650, 1188, 1188, 1188, 1188, 1188,  650, 1188,
      650,  650,  650,  650,  650, 1188,  650,  650,  650,  650,
      650,  650,  650, 1188, 1188, 1188, 1188,  650,  409,  409,
     1188, 1188, 1188, 1188, 1188,  409, 1188,  409,  409,  409,
      409,  409, 1188,  409,  409,  409,  409,  409,  409,  409,
     1188, 1188, 1188, 1188,  409,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  655, 1188, 1188,

      655, 1188, 1188, 1188, 1188,  655, 1188, 1188, 1188, 1188,
     1188, 1188, 1188,  655, 1188, 1188, 1188, 1188,  655, 1188,
      655,  655,  655, 1188, 1188, 1188, 1188,  655,  659, 1188,
     1188, 1188, 1188, 1188,  659, 1188,  659,  659,  659,  659,
      659, 1188, 1188,  659,  659,  659,  659,  659,  659, 1188,
     1188, 1188, 1188,  659,  445, 1188, 1188, 1188, 1188, 1188,
      445, 1188,  445,  445,  445,  445,  445, 1188, 1188,  445,
      445,  445,  445,  445,  445, 1188, 1188, 1188, 1188,  445,
      774,  774,  774,  774, 1188, 1188,  774, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188,  774,  774, 1188, 1188,

     1188,  774, 1188,  774,  774,  774, 1188, 1188, 1188, 1188,
      774,  662,  662,  662,  662, 1188, 1188,  662, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,  662, 1188,
     1188, 1188,  662, 1188,  662,  662,  662, 1188, 1188, 1188,
     1188,  662,  665,  665,  665,  665, 1188, 1188,  665, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,  665,  665,
     1188, 1188, 1188,  665, 1188,  665,  665,  665, 1188, 1188,
     1188, 1188,  665,  668, 1188, 1188, 1188, 1188,  668, 1188,
      668,  668,  668, 1188, 1188, 1188, 1188,  668,  670, 1188,
      670,  670,  670, 1188, 1188, 1188, 1188,  670,  778, 1188,

      778, 1188, 1188, 1188, 1188,  778, 1188,  778,  778,  778,
     1188, 1188, 1188, 1188,  778,  677, 1188,  677,  677,  677,
     1188, 1188, 1188, 1188,  677,  784, 1188, 1188, 1188, 1188,
      784, 1188,  784,  784,  784, 1188, 1188, 1188, 1188,  784,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795, 1188,  795,  795,
      795,  795, 1188,  795, 1188, 1188,  795,  795,  795,  795,
      795,  795,  549, 1188,  549,  549,  549, 1188, 1188, 1188,
     1188,  549,  554, 1188,  554,  554,  554, 1188, 1188, 1188,
     1188,  554,  815, 1188,  815,  815,  815,  815,  815, 1188,

     1188, 1188,  815, 1188,  815,  815,  815, 1188, 1188, 1188,
     1188,  815,  718,  718, 1188,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  820, 1188, 1188,  820, 1188, 1188,
     1188, 1188,  820, 1188,  820,  820,  820,  311, 1188,  311,
     1188,  311,  311, 1188,  311, 1188, 1188, 1188,  311,  311,
     1188,  311,  311,  311,  728,  728, 1188,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  328, 1188, 1188,  328,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188,  328, 1188,  328,
      328,  328,  742,  742, 1188,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  746,  746,  746,  746,  746,  340,
     1188, 1188,  340, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
      340,  340,  340,  340,  340,  304,  304, 1188,  304, 1188,

     1188, 1188, 1188, 1188, 1188, 1188,  304, 1188,  304,  304,
     1188,  304,  304, 1188, 1188,  304,  304, 1188,  304,  304,
      304, 1188,  304,  365, 1188, 1188, 1188, 1188, 1188,  365,
     1188,  365,  365,  365,  365,  365, 1188, 1188,  365,  365,
      365,  365,  365,  365, 1188, 1188, 1188, 1188,  365,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  397, 1188, 1188, 1188, 1188, 1188,  397, 1188,  397,
      397,  397,  397,  397, 1188, 1188,  397,  397,  397,  397,

      397,  397, 1188, 1188, 1188, 1188,  397,  764,  764, 1188,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  409,
      409, 1188, 1188, 1188, 1188, 1188,  409, 1188,  409,  409,
      409,  409,  409, 1188,  409,  409,  409,  409,  409,  409,
      409, 1188, 1188, 1188, 1188,  409,  445, 1188, 1188, 1188,
     1188, 1188,  445, 1188,  445,  445,  445,  445,  445, 1188,
     1188,  445,  445,  445,  445,  445,  445, 1188, 1188, 1188,
     1188,  445,  854, 1188,  854,  854,  854, 1188, 1188, 1188,

     1188,  854,  774,  774,  774,  774, 1188, 1188,  774, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,  774,  774,
     1188, 1188, 1188,  774, 1188,  774,  774,  774, 1188, 1188,
     1188, 1188,  774,  662,  662,  662,  662, 1188, 1188,  662,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
      662, 1188, 1188, 1188,  662, 1188,  662,  662,  662, 1188,
     1188, 1188, 1188,  662,  778, 1188,  778, 1188, 1188, 1188,
     1188,  778, 1188,  778,  778,  778, 1188, 1188, 1188, 1188,
      778,  784, 1188, 1188, 1188, 1188,  784, 1188,  784,  784,
      784, 1188, 1188, 1188, 1188,  784,  900,  900, 1188,  900,

     1188, 1188, 1188, 1188,  900, 1188,  900,  900,  900,  907,
      907, 1188,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833, 1188,  833, 1188, 1188, 1188,  833,  833,
      833,  833,  833,  929,  929,  929,  929, 1188, 1188,  929,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,  929,
      929, 1188, 1188, 1188,  929, 1188,  929,  929,  929, 1188,

     1188, 1188, 1188,  929,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955, 1188,  955,  955,  955,  955, 1188,  955, 1188,  955,
     1188,  955,  955,  955,  955,  955,  983,  983, 1188,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1188, 1028, 1028, 1028, 1028,
     1188, 1028, 1188, 1188, 1188, 1028, 1028, 1028, 1028, 1028,

     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1188, 1029, 1029,
     1029, 1029, 1188, 1029, 1188, 1188, 1188, 1029, 1029, 1029,
     1029, 1029, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1188,
     1081, 1081, 1081, 1081, 1188, 1081, 1188, 1188, 1188, 1081,
     1081, 1081, 1081, 1081, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1188, 1092, 1092, 1092, 1092, 1188, 1092, 1188, 1188,
     1188, 1092, 1092, 1092, 1092, 1092, 1138, 1138, 1188, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,   85, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188
    } ;

static yyconst flex_int16_t yy_chk[10005] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,   21,   22,    4,   23,
       21,   22,   24,   23,   47, 1183,   24,    4,    4,   35,
        4,    4,   36,   39,    4,    4,    4,   40,   48,  100,

       35,   57,  100,   36,   39,  233,  316,  117,   40,  233,
       43,   43,  117,   43,   58,   43,   39, 1181,   21,   22,
       40,   23,   44,   44,   24,   44,   47,   44,  316,   51,
       51,   35,   51,   63,   36,   39,   64,   81,   82,   40,
       48,   52,   52,   57,   52,    4,    5,    5,    5,    5,
        5,    5,    5,   43,    5,    5,   58,    5,    5,    5,
       45,    5,   45,    5,    5,   44,  282,  882,    5,    5,
        5,   45,   51, 1179,  882,   63,   45,  216,   64,   81,
       82,  259,  216,   45,   52,   46,  259,   46,   93,    5,
        5,    5,   53,  282,   53,   83,   46,   93,   75,  941,

      306,   46,   45,  306,   83,   83,   93,   54,   46,   54,
       89,   89,   75,   89,  941,   53,    5,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,   46,    6,    6,
       54,    6,    6,    6,   53,    6,   69,    6,    6,   55,
       75,   55,    6,    6,    6,   56,   61,   56,   84,   54,
     1176,  101,  318,   89,  101,   61,   61,   84,   84,   69,
     1173,  264,   55,    6,    6,    6,  264, 1142,   56,   61,
      127,  127,  127,  127,  318,  101,  221,  127,   69,  221,
     1142,   55,  149,  149,  149,  149,  221,   56,   61,  149,
        6,    6,    6,    6,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   70,   13,   13,   62,   13,   13,   13,   71,   13,
       72,   13,   13,   62,   62,   76,   13,   13,   13,   77,
      206,   78, 1172,  206,   70,  206,  526,   62,  526,   76,
       77,   71,   78,   72, 1168,  109,  109,   13,   13,   13,
      109,  404,   77,   70,   78,  104,   62,  104,  104,  104,

       71,   88,   72,  104,   88,  110,  110,   76, 1165,  404,
      110,   77,  109,   78,   13,   13,   13,   13,   14,   14,
       14,   14,   14,   14,   14,   88,   14,   14,  307,   14,
       14,   14,  110,   14, 1182,   14,   14,  307, 1182,  197,
       14,   14,   14,   94,   88,   94,   94,   94,   94,  312,
      197,  319,  312,  373,  118,  118,   94,  118,  373,  131,
      131,   14,   14,   14,  131,   97,  349,   97,   97,  349,
       97,   97,   97,  319,  234,   94,   97,  126,  126,  234,
      126,  197,  317,  234,  153,  153,  131,  153,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,  118,

       15,   15,  317,   15,   15,   15, 1164,   15,  224,   15,
       15,  224,  334,  321,   15,   15,   15,  102,  224, 1163,
      102,  334,  126,  102,  317,  105,  132,  132,  105,  153,
      294,  132,  102,  294,  321,   15,   15,   15,  102,  322,
      105,  102,  227,  227,  354,  227,  105,  354,  157,  157,
     1162,  157,  375,  132,  294,  161,  161,  375,  161,  327,
     1161,  322,   15,   15,   15,   15,   16,   16,   16,   16,
       16,   16,   16,  294,   16,   16,  561,   16,   16,   16,
      327,   16,  565,   16,   16,  227, 1160,  102,   16,   16,
       16,  103,  103,  157,  103,  105,  120,  120,  120,  120,

      161,  565,  103,  561,  103,  103,  103,  103,  314,   16,
       16,   16,  120,  351,  351,  103,  351,  120,  181,  181,
      181,  181, 1156,  238,  549,  181, 1120,  238, 1120,  549,
      314,  314,  314,  238,  103,  238,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       25,   25,   25,   25,   25,   25,   25,  533,   25,   25,

     1155,   25,   25,   25,  726,   25,  366,   25,   25,  333,
      366,  533,   25,   25,   25,  121,  121,  121,  121, 1153,
     1152,  122,  122,  122,  122,  165,  165,  726,  122,  595,
      165,  121,  366,   25,   25,   25,  121,  122,  123,  123,
      123,  123,  122, 1151,  333,  123,  172,  172,  428,  172,
      595,  428,  165,  352,  123,  352,  352,  352,  428,  123,
       25,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,  333,   26,   26, 1158,   26,   26,   26,  869,   26,
      340,   26,   26,  340, 1150, 1158,   26,   26,   26,  297,
      297,  172,  297,  122,  869,  125,  125,  125,  125,  143,

      143,  143,  143,  144,  144,  144,  144,   26,   26,   26,
      123,  125,  597,  239, 1178,  143,  125,  125,  239,  144,
      143, 1178,  239,  340,  144, 1149,  357,  357,  239,  357,
      239, 1148,  297,  597,   26,   26,   26,   26,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,  111,  111,   49,  111, 1147,  648,
       49,   49,   49,   49,  166,  166,  315,  551,  138,  166,
      111,  111,  551,  368,  368,  111,  368,  648,  315,  138,
      138,   49,   49,   49,  138,  591,  138,  315,  554,  180,
      180,  166,  180,  554, 1146,  186,  186,  111,  186,  111,
      315,  343,  189,  189,  343,  189,  138,  591,   49,   49,
       49,   49,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,  134,
      134,   50,  134, 1145,  180,   50,   50,   50,   50,  581,
      186, 1138,  581,  139,  343,  134,  134,  189,  556,  359,

      134,  343,  359,  556,  139,  139,   50,   50,   50,  139,
      339,  139,  339,  339, 1135,  339,  339,  339, 1134, 1132,
     1131,  339,  134,  359,  134,  377,  377, 1130,  377,  389,
      389,  139,  389,   50,   50,   50,   50,   50,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,  140,  886, 1129,
       79,   79,   79,   79,  148,  148,  148,  148,  140,  140,
     1128, 1127,  886,  140,  148,  140,  174,  174,  174,  174,
      148,   79,   79,   79,  601,  148,  145,  145,  145,  145,
     1126,  502,  174,  145,  502,  140,  502,  174,  192,  192,

     1125,  192,  145,  201,  201,  601,  201,  145,   79,   79,
       79,   79,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80, 1124, 1123, 1112,   80,   80,   80,   80,  175,  175,
      175,  175,  594,  192,  142,  142,  201,  142,  201,  142,
      179,  179,  179,  179,  175,   80,   80,   80,  145,  175,
      142,  142, 1185, 1111,  594,  142,  179,  142, 1098,  365,
      365,  179,  219,  219,  365,  219,  388,  388,  388,  388,
     1185, 1097,   80,   80,   80,   80,   95,  142, 1095,  142,
      146,  146,  146,  146, 1094,  515,  365,  146,  515,   95,

      176,  176,  176,  176,  600,  515,  146,  176,  398,   95,
       95,  146,  398, 1170,   95,   95,  176,  219,  491,   95,
       95,  176,   95,   95,  225,  225,  600,  225, 1170,  491,
       95,   95, 1088, 1087,  398,   95,   95,  167,  167,  732,
      167,   95,   95,   95,   95,   95,   95,   96,   96,   96,
       96, 1086,  350,  167,  167,  350,   96, 1085,  167, 1084,
      491,  732,  146,   96,   96,   96, 1083,  350,  341,  225,
     1082,  341,  176,  350, 1080, 1054,  171,  171,  171,  171,
      167,  410,  167,  171,   96,  410,  400,  400,   96,  400,
       96,   96,   96, 1053,  171,  171,  171,  171, 1051,  517,

      242,  242,  517,  242,   96, 1050, 1049,  410,   96,  517,
       96,  341,   96,   96,   98,   98,   98,   98,  177,  177,
      177,  177,  350,   98,  341,  177,  200,  200,  200,  200,
       98,   98,   98,  353,  177, 1048,  353,  246,  246,  177,
      246, 1047,  200,  200,  200,  242,  252,  252,  353,  252,
     1046,   98,  446,   98,  353,   98,  446,   98,   98,   98,
     1045,  255,  255,  200,  255,  298,  298,  342,  298,  344,
      342,   98,  344,  347,  602,   98,  347,   98,  446,   98,
       98,   99,  246, 1044,   99,  346,  320, 1043,  346,  320,
      177,  252,  200,   99,   99,  602,   99,   99, 1042,  723,

       99,   99,   99,  353,  606,   99,  255,  606,  298,  320,
      342,  320,  344, 1041,  904,  360,  347,  360,  360,  360,
      723,  367,  367,  360,   99,  320,  367,  344,  346,  727,
      345,  342,  320,  345,  347,  346,  904,  345,  380,  380,
      380,  380,  413,  413,  346,  413,  609,  320,  367,  609,
      727,   99,  137,  137,  380,  137,  137,  137,  137,  380,
      137,  137, 1040,  137,  137,  137, 1039,  137,  355,  137,
      137,  355,  345,  345,  137,  137,  137,  356,  356,  361,
      356,  596,  361,  355,  596,  430,  430,  362,  430,  355,
      362,  982,  356, 1038,  361,  137,  137,  137,  356,  345,

      361,  356,  362, 1037,  596,  370,  370, 1036,  362,  611,
      370,  716,  611,  982,  381,  381,  381,  381,  730, 1035,
      826,  381,  137,  137,  137,  137,  295,  295,  295,  295,
      381, 1034,  370,  435,  435,  381,  435,  629,  355,  730,
      629,  826,  295,  295,  295,  370,  716,  356, 1033,  361,
     1031,  383,  383,  383,  383, 1030, 1026,  362,  383,  384,
      384,  384,  384,  295, 1025,  440,  440,  383,  440,  611,
      295,  295,  383,  716, 1024,  384,  385,  385,  385,  385,
      384,  384,  830,  385,  448,  448,  381,  448, 1023,  295,
     1022,  295,  295,  296,  296,  296,  296, 1021,  387,  387,

      387,  387, 1020,  830, 1018,  392,  392,  392,  392,  296,
      296,  296,  392, 1017,  387,  386,  386,  386,  386,  387,
      387,  598,  386,  383,  598,  393,  393,  393,  393, 1016,
      296,  386,  393, 1015,  397,  397,  386,  296,  296,  397,
      421,  421,  421,  421,  598, 1013, 1012,  421,  426,  426,
      426,  426,  399,  399, 1011,  426,  296,  399,  296,  296,
      310,  397, 1010,  310, 1009,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  399,
      409, 1008,  310,  310,  310,  310, 1007,  386,  402,  402,
     1006,  409,  409,  402,  457,  457,  409,  457,  409,  468,

      468,  411,  468,  310,  310,  310, 1005,  477,  477,  415,
      477,  610,  411,  411,  610,  402, 1004,  411,  409,  411,
      415,  415, 1003,  482,  482,  415,  482,  415,  402, 1001,
      310,  310,  310,  310,  310,  328, 1000,  618,  328,  411,
      618,  328,  328,  328,  328,  999,  996,  415,  416,  416,
      416,  416,  486,  486,  995,  486,  986,  328,  328,  328,
      415,  985,  983,  610,  416,  417,  417,  417,  417,  416,
      981,  980,  417,  419,  419,  419,  419,  979,  328,  978,
      419,  417,  420,  420,  420,  420,  417,  618,  977,  419,
      445,  445,  420,  976,  419,  445,  497,  497,  420,  497,

      975,  974,  616,  420,  328,  616,  328,  328,  348,  973,
      972,  348,  427,  427,  427,  427,  971,  445,  970,  427,
      348,  348,  969,  348,  348,  447,  447,  348,  348,  348,
      447,  968,  348,  422,  422,  422,  422,  417,  967,  966,
      422,  450,  450,  965,  964,  419,  450,  512,  512,  422,
      512,  348,  447,  963,  422,  423,  423,  423,  423,  465,
      465,  465,  465,  961,  616,  423,  465,  635,  450,  959,
      635,  423,  452,  452,  452,  452,  423,  956,  348,  405,
      405,  450,  405,  405,  405,  405,  612,  405,  405,  612,
      405,  405,  405,  452,  405,  617,  405,  405,  617,  954,

      953,  405,  405,  405,  630,  422,  630,  630,  630,  425,
      425,  425,  425,  451,  451,  451,  451,  952,  709,  425,
      451,  709,  405,  405,  405,  425,  460,  460,  460,  460,
      425,  451,  451,  451,  451,  612,  471,  471,  471,  471,
      951,  950,  460,  471,  617,  518,  518,  460,  518,  405,
      405,  405,  405,  406,  406,  949,  406,  406,  406,  406,
      721,  406,  406,  721,  406,  406,  406,  948,  406,  654,
      406,  406,  654,  947,  946,  406,  406,  406,  945,  654,
      944,  454,  454,  454,  454,  943,  535,  535,  454,  535,
      942,  940,  464,  464,  464,  464,  406,  406,  406,  454,

      454,  454,  454,  539,  539,  939,  539,  938,  464,  456,
      456,  456,  456,  464,  543,  543,  456,  543,  521,  521,
      937,  521,  936,  406,  406,  406,  406,  456,  456,  456,
      456,  461,  461,  461,  461,  935,  934,  932,  461,  463,
      463,  463,  463,  931,  930,  926,  463,  461,  467,  467,
      467,  467,  461,  925,  924,  463,  466,  466,  466,  466,
      463,  521,  921,  466,  467,  546,  546,  622,  546,  467,
      622,  920,  466,  472,  472,  472,  472,  466,  910,  607,
      472,  624,  607,  909,  624,  655,  607,  907,  655,  903,
      623,  636,  636,  623,  736,  655,  636,  736,  740,  637,

      637,  740,  729,  461,  637,  729,  621,  902,  900,  621,
      622,  463,  626,  625,  627,  626,  625,  627,  636,  622,
      691,  607,  899,  691,  624,  729,  637,  898,  466,  586,
      624,  897,  586,  623,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  607,  621,
      623,  586,  586,  586,  586,  626,  625,  627,  896,  740,
      621,  626,  628,  628,  627,  628,  631,  631,  731,  631,
      895,  731,  586,  586,  586,  625,  894,  628,  691,  638,
      638,  631,  812,  628,  638,  812,  893,  631,  892,  633,
      633,  731,  633,  634,  634,  743,  634,  891,  743,  586,

      586,  586,  586,  586,  633,  890,  638,  889,  634,  888,
      633,  645,  645,  633,  634,  887,  645,  638,  641,  641,
      641,  641,  642,  642,  642,  642,  646,  646,  647,  647,
      885,  646,  628,  647,  659,  659,  631,  744,  645,  659,
      744,  641,  660,  660,  720,  642,  720,  660,  720,  720,
      884,  741,  883,  646,  741,  647,  881,  720,  743,  633,
      880,  659,  834,  634,  879,  834,  647,  649,  649,  660,
      649,  649,  649,  649,  749,  649,  649,  749,  649,  649,
      649,  650,  649,  745,  649,  649,  745,  878,  877,  649,
      649,  649,  650,  650,  876,  827,  744,  650,  827,  650,

      663,  663,  663,  663,  651,  741,  747,  663,  875,  747,
      649,  649,  649,  652,  874,  651,  651,  749,  827,  650,
      651,  663,  651,  828,  652,  652,  828,  661,  661,  652,
      873,  652,  661,  835,  745,  749,  835,  649,  649,  649,
      649,  836,  651,  871,  836,  872,  828,  870,  872,  747,
      750,  652,  911,  750,  661,  911,  662,  662,  662,  662,
      868,  867,  652,  662,  747,  661,  664,  664,  664,  664,
      866,  865,  864,  664,  662,  662,  662,  662,  759,  759,
      759,  759,  863,  835,  664,  664,  664,  664,  665,  665,
      665,  665,  821,  750,  821,  665,  821,  821,  862,  836,

      911,  759,  861,  860,  750,  821,  665,  665,  665,  665,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  751,  754,  754,  751,  754,  838,  752,  753,  838,
      752,  753,  755,  755,  859,  755,  858,  754,  748,  748,
      748,  962,  857,  754,  962,  912,  856,  755,  912,  757,
      757,  855,  905,  755,  757,  905,  839,  756,  756,  839,
      756,  852,  851,  850,  751,  748,  748,  748,  748,  748,
      752,  753,  756,  847,  841,  905,  757,  841,  756,  753,
      838,  756,  846,  837,  751,  766,  752,  761,  761,  761,
      761,  757,  754,  763,  763,  832,  766,  766,  763,  839,
      831,  766,  755,  766,  771,  771,  839,  825,  912,  771,

      761,  775,  775,  775,  775,  824,  823,  841,  775,  842,
      763,  820,  842,  766,  841,  914,  818,  756,  914,  845,
      845,  771,  775,  817,  845,  763,  764,  764,  766,  764,
      764,  764,  764,  816,  764,  764,  771,  764,  764,  764,
      815,  764,  908,  764,  764,  908,  845,  814,  764,  764,
      764,  813,  842,  845,  773,  773,  773,  773,  811,  984,
      810,  773,  984,  919,  919,  908,  809,  842,  919,  764,
      764,  764,  773,  773,  773,  773,  788,  788,  914,  808,
      807,  788,  984,  843,  788,  788,  843,  806,  987,  788,
      919,  987,  788,  788,  919,  788,  764,  764,  764,  764,

      765,  765,  805,  765,  765,  765,  765,  915,  765,  765,
      915,  765,  765,  765,  804,  765, 1096,  765,  765, 1096,
      803,  802,  765,  765,  765,  801,  843,  800,  774,  774,
      774,  774,  798, 1052,  987,  774, 1052,  843,  844,  844,
      797,  844,  796,  765,  765,  765,  774,  774,  774,  774,
      915,  794, 1056,  844,  915, 1056, 1052, 1154, 1167,  844,
     1154, 1167,  988,  916,  989,  988,  916,  989,  793,  792,
      765,  765,  765,  765,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      848,  848,  853,  853,  849,  848,  916,  853,  844,  791,
      790,  916,  988, 1056,  989,  849,  849,  840,  840,  840,
      849,  917,  849,  918,  917, 1057,  918,  848, 1057,  853,
      789,  787,  922,  922,  848,  991,  853,  922,  991,  786,
      990,  785,  849,  990,  840,  840,  840,  840,  840,  849,
      854,  854,  854,  854,  783,  992,  782,  854,  992,  922,
      781,  923, 1169,  922,  917, 1169,  918,  780,  854,  854,
      854,  854,  923,  923,  779,  927,  927,  923,  991,  923,
      927,  991, 1057,  990,  917,  993,  918,  778,  993,  928,
      928,  928,  928,  777, 1055,  776,  928, 1055,  992,  923,

      770,  990,  927,  923,  769,  992,  927,  928,  928,  928,
      928,  929,  929,  929,  929,  994,  994,  768,  929,  762,
      994,  997,  997,  758, 1059,  998,  997, 1059,  993,  929,
      929,  929,  929,  746,  742,  993,  998,  998,  734,  733,
      728,  998,  994,  998, 1002, 1002,  725,  724,  997, 1002,
     1058, 1058, 1060, 1058,  718, 1060,  717, 1055, 1061, 1113,
      994, 1061, 1113,  998, 1062, 1062,  997, 1059, 1066, 1062,
      715, 1002, 1065, 1065,  714, 1117,  713, 1065, 1117, 1066,
     1066,  998, 1113,  712, 1066, 1118, 1066, 1059, 1118, 1002,
      710, 1062,  708, 1058,  707, 1060,  703, 1070, 1070, 1065,

     1139, 1061, 1070, 1139, 1119, 1119, 1066, 1119, 1121, 1122,
      701, 1121, 1122, 1060, 1140, 1061, 1141, 1140, 1144, 1141,
      699, 1144,  698, 1139, 1070, 1117, 1143, 1157, 1159, 1143,
     1157, 1159, 1174, 1171, 1177, 1174, 1171, 1177, 1180, 1184,
      697, 1180, 1184, 1118,  696, 1187, 1187, 1119, 1187,  695,
      694, 1121, 1122, 1357,  693, 1357, 1357, 1357, 1121,  692,
      690, 1144, 1141, 1140, 1144,  689, 1345, 1122,  688, 1143,
      687, 1159,  686,  685, 1345, 1143, 1171, 1345, 1345,  684,
      683,  682,  681, 1157, 1159,  680,  679,  678, 1187, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,

     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,

     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,

     1204, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1211, 1211, 1211, 1211, 1211, 1211, 1211,

     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1215, 1215,  675, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1216, 1361, 1388, 1361, 1361, 1361,  674,
      673,  672,  671, 1388,  670,  667, 1388, 1388, 1216,  666,
     1216, 1216, 1216,  658,  657,  656,  653, 1216, 1217,  644,
     1217, 1217, 1394, 1217, 1394, 1394, 1394, 1217, 1217,  643,
     1217, 1217, 1217, 1218,  640, 1218, 1218, 1218, 1218,  605,

     1218,  604,  603,  593, 1218, 1218, 1218, 1218, 1218, 1218,
     1219, 1219, 1219,  592,  590,  588,  587,  585, 1219,  582,
      580,  578,  577, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219,  576, 1219, 1219, 1220,  574, 1220, 1220,  572,
     1220,  570,  569,  566, 1220, 1220,  563, 1220, 1220, 1220,
     1221, 1221, 1221,  560,  558,  557,  555,  553, 1221,  552,
      550,  548,  545, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221,  541, 1221, 1221, 1222, 1222,  537, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,

     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223,  534,  532,
      531,  530,  528, 1223,  527, 1223, 1223, 1223, 1223, 1223,
      524,  523, 1223, 1223, 1223, 1223, 1223, 1223,  520,  514,
      511,  510, 1223, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1225,  506, 1225, 1225, 1225,
      504,  503,  501,  499, 1225, 1226,  496, 1226, 1226,  494,
      493,  490, 1226,  488, 1226, 1226, 1226,  484,  481,  480,
      479, 1226, 1227, 1227, 1227, 1227,  476,  475, 1227,  474,

      470,  462,  459,  455,  443,  442, 1227,  438,  437, 1227,
      433,  432,  418, 1227,  412, 1227, 1227, 1227,  407,  403,
      395, 1227, 1227, 1228, 1228, 1228, 1228,  394,  391,  382,
      379,  376,  374,  371,  363,  335,  332, 1228,  331, 1228,
     1228, 1228,  330,  329, 1228,  326, 1228, 1228, 1228,  324,
      323,  313,  311, 1228, 1229, 1229, 1229, 1229,  304,  303,
     1229,  300,  299,  289,  286,  285,  281,  277,  276,  273,
      269,  268,  265,  260,  229, 1229,  215, 1229, 1229, 1229,
      214,  213,  209,  208, 1229, 1230, 1230,  204, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231,  199,  196,
      188,  185,  178, 1231,  164, 1231, 1231, 1231, 1231, 1231,
      160,  156, 1231, 1231, 1231, 1231, 1231, 1231,  147,  133,
      130,  124, 1231, 1232, 1232,  112, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1233, 1233,  108,   92,   91,
       90,   85, 1233,    8, 1233, 1233, 1233, 1233, 1233,    7,
     1233, 1233, 1233, 1233, 1233, 1233, 1233,    0,    0,    0,

        0, 1233, 1234, 1234, 1234, 1234,    0,    0, 1234,    0,
        0,    0,    0,    0,    0,    0, 1234,    0,    0, 1234,
        0,    0,    0, 1234,    0, 1234, 1234, 1234,    0,    0,
        0, 1234, 1234, 1235, 1235, 1235, 1235,    0,    0,    0,
        0, 1235,    0,    0,    0,    0,    0, 1235,    0, 1235,
     1235,    0,    0,    0, 1235,    0, 1235, 1235, 1235,    0,
        0,    0,    0, 1235, 1236, 1236, 1236, 1236,    0,    0,
     1236,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1236,    0, 1236, 1236, 1236,
        0,    0,    0,    0, 1236, 1237,    0,    0, 1237,    0,

        0,    0,    0, 1237,    0, 1237, 1237, 1237,    0,    0,
        0,    0, 1237, 1238, 1238,    0, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1239, 1239,    0, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240, 1240,    0,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1241,
        0,    0,    0,    0,    0, 1241,    0, 1241, 1241, 1241,
     1241, 1241,    0,    0, 1241, 1241, 1241, 1241, 1241, 1241,
        0,    0,    0,    0, 1241, 1242,    0, 1242, 1242, 1242,
        0,    0,    0,    0, 1242, 1243, 1243, 1243, 1243,    0,
        0, 1243,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1243, 1243,    0,    0,    0, 1243,    0, 1243, 1243,
     1243,    0,    0,    0,    0, 1243, 1244, 1244, 1244, 1244,
        0,    0, 1244,    0,    0,    0,    0,    0,    0,    0,
     1244,    0,    0, 1244,    0,    0,    0, 1244,    0, 1244,

     1244, 1244,    0,    0,    0, 1244, 1244, 1245, 1245, 1245,
     1245,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1245,    0, 1245, 1245,    0,    0,    0, 1245,    0,
     1245, 1245, 1245,    0,    0,    0,    0, 1245, 1246, 1246,
     1246, 1246,    0,    0, 1246,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1246,
        0, 1246, 1246, 1246,    0,    0,    0,    0, 1246, 1247,
        0, 1247, 1247, 1247,    0,    0,    0,    0, 1247, 1248,
        0, 1248,    0,    0,    0,    0, 1248,    0, 1248, 1248,
     1248,    0,    0,    0,    0, 1248, 1249, 1249,    0, 1249,

        0,    0,    0,    0, 1249,    0, 1249, 1249, 1249,    0,
        0,    0,    0, 1249, 1250, 1250,    0, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250,    0, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250,    0, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1251,    0,    0, 1251,
        0,    0,    0,    0, 1251,    0, 1251, 1251, 1251,    0,
        0,    0,    0, 1251, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252,    0, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1253, 1253,    0, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253,    0, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254, 1254,
        0, 1254,    0, 1254, 1254, 1254,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1254, 1254, 1254,    0,
     1254, 1254,    0,    0,    0,    0,    0, 1254, 1255,    0,
        0, 1255,    0,    0,    0,    0, 1255,    0, 1255, 1255,
     1255,    0,    0,    0,    0, 1255, 1256, 1256,    0, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,

     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1257, 1257,
        0, 1257,    0, 1257, 1257, 1257, 1257, 1257, 1257,    0,
     1257, 1257, 1257, 1257,    0, 1257, 1257, 1257, 1257,    0,
     1257,    0, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1258,    0,    0, 1258,    0,    0,    0,    0, 1258,    0,
        0,    0,    0, 1258, 1258,    0, 1258,    0,    0,    0,
        0, 1258,    0, 1258, 1258, 1258, 1259, 1259,    0, 1259,
        0, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259,    0, 1259,    0,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1260, 1260,

        0, 1260,    0, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,    0,
     1260,    0, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1261,    0,    0, 1261,    0,    0,    0,    0, 1261,    0,
     1261, 1261, 1261,    0,    0,    0,    0, 1261, 1262, 1262,
        0, 1262, 1262, 1262, 1262, 1262, 1262,    0,    0, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,    0,
     1262,    0, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1263,    0, 1263, 1263, 1263,    0,    0,    0,    0, 1263,
     1264,    0, 1264, 1264,    0,    0,    0, 1264,    0, 1264,

     1264, 1264,    0,    0,    0,    0, 1264, 1265,    0, 1265,
     1265, 1265,    0,    0,    0,    0, 1265, 1266,    0, 1266,
     1266,    0,    0,    0, 1266,    0, 1266, 1266, 1266,    0,
        0,    0,    0, 1266, 1267, 1267,    0, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267,    0, 1267,    0, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1268,    0,    0, 1268,
        0,    0,    0,    0, 1268,    0, 1268, 1268, 1268,    0,
        0,    0,    0, 1268, 1269, 1269,    0, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,    0, 1269,

     1269, 1269, 1269, 1269, 1269, 1269, 1269,    0, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1270, 1270,    0, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270,    0, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270,    0, 1270,    0,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1271,    0,
     1271, 1271, 1271, 1271, 1271,    0,    0,    0, 1271,    0,
     1271, 1271, 1271,    0,    0,    0,    0, 1271, 1272, 1272,
        0, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272,    0, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,    0,
        0, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1274, 1274, 1274,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274,    0, 1274, 1274, 1275, 1275,    0,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1276,
        0, 1276, 1276, 1276,    0,    0,    0,    0, 1276, 1277,

     1277,    0,    0,    0, 1277,    0, 1277, 1277, 1277,    0,
        0,    0,    0, 1277, 1278,    0, 1278, 1278,    0, 1278,
        0,    0,    0, 1278, 1278,    0, 1278, 1278, 1278, 1279,
        0,    0, 1279,    0,    0,    0,    0, 1279,    0, 1279,
     1279, 1279, 1280,    0,    0, 1280,    0, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1281,    0, 1281, 1281, 1281,    0,
        0,    0, 1281, 1282,    0,    0,    0,    0,    0,    0,
        0, 1282,    0, 1282, 1282, 1282, 1283,    0, 1283, 1283,

        0, 1283,    0,    0,    0, 1283, 1283,    0, 1283, 1283,
     1283, 1284,    0,    0, 1284,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1284, 1284, 1284, 1284, 1284, 1285, 1285,    0,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1286,
        0,    0,    0,    0,    0, 1286,    0, 1286, 1286, 1286,
     1286, 1286,    0,    0, 1286, 1286, 1286, 1286, 1286, 1286,
        0,    0,    0,    0, 1286, 1287,    0,    0,    0,    0,

        0, 1287,    0, 1287,    0, 1287, 1287, 1287,    0,    0,
     1287, 1287, 1287, 1287, 1287, 1287,    0,    0,    0,    0,
     1287, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1289,    0, 1289, 1289,    0,    0,    0,
     1289,    0, 1289, 1289, 1289,    0,    0,    0,    0, 1289,
     1290,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1290,    0, 1290, 1290, 1290,
        0,    0,    0,    0, 1290, 1291, 1291, 1291, 1291,    0,

        0, 1291,    0,    0,    0,    0,    0,    0,    0, 1291,
        0,    0, 1291,    0,    0,    0, 1291,    0, 1291, 1291,
     1291,    0,    0,    0, 1291, 1291, 1292, 1292, 1292, 1292,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1292,    0, 1292, 1292, 1292,    0,    0, 1292,    0, 1292,
     1292, 1292,    0,    0,    0,    0, 1292, 1293, 1293, 1293,
     1293,    0,    0, 1293,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1293,    0,
     1293, 1293, 1293,    0,    0,    0,    0, 1293, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,    0, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1295,    0, 1295,    0,    0, 1295,    0, 1295, 1295, 1295,
        0,    0,    0,    0, 1295, 1296, 1296,    0, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1297,    0,    0,
        0,    0,    0, 1297,    0, 1297, 1297, 1297, 1297, 1297,
        0,    0, 1297, 1297, 1297, 1297, 1297, 1297,    0,    0,
        0,    0, 1297, 1298,    0,    0,    0,    0,    0, 1298,

        0, 1298,    0, 1298, 1298, 1298,    0,    0, 1298, 1298,
     1298, 1298, 1298, 1298,    0,    0,    0,    0, 1298, 1299,
     1299,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1300, 1300,    0, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1301, 1301,    0,    0,    0,    0,    0,
     1301,    0, 1301, 1301, 1301, 1301, 1301,    0, 1301, 1301,

     1301, 1301, 1301, 1301, 1301,    0,    0,    0,    0, 1301,
     1302,    0,    0,    0,    0,    0, 1302,    0, 1302,    0,
     1302, 1302, 1302,    0,    0, 1302, 1302, 1302, 1302, 1302,
     1302,    0,    0,    0,    0, 1302, 1303, 1303, 1303, 1303,
        0,    0, 1303,    0,    0,    0,    0,    0,    0,    0,
     1303,    0,    0, 1303,    0,    0,    0, 1303,    0, 1303,
     1303, 1303,    0,    0,    0, 1303, 1303, 1304, 1304, 1304,
     1304,    0,    0,    0,    0, 1304,    0,    0,    0,    0,
        0, 1304,    0, 1304, 1304,    0,    0,    0, 1304,    0,
     1304, 1304, 1304,    0,    0,    0,    0, 1304, 1305, 1305,

     1305, 1305,    0,    0, 1305,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1305,
        0, 1305, 1305, 1305,    0,    0,    0,    0, 1305, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,    0,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1307,    0,    0, 1307,    0,    0,    0,    0, 1307,
        0,    0,    0,    0,    0,    0,    0, 1307,    0,    0,
        0,    0, 1307,    0, 1307, 1307, 1307,    0,    0,    0,
        0, 1307, 1308,    0,    0, 1308,    0,    0,    0,    0,

     1308,    0, 1308, 1308, 1308,    0,    0,    0,    0, 1308,
     1309, 1309,    0, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1310, 1310,    0, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1311, 1311,    0, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,

     1311, 1311, 1311, 1311, 1311, 1311, 1312,    0,    0,    0,
        0,    0, 1312,    0, 1312, 1312, 1312, 1312, 1312,    0,
        0, 1312, 1312, 1312, 1312, 1312, 1312,    0,    0,    0,
        0, 1312, 1313,    0,    0,    0,    0,    0, 1313,    0,
     1313,    0, 1313, 1313, 1313,    0,    0, 1313, 1313, 1313,
     1313, 1313, 1313,    0,    0,    0,    0, 1313, 1314, 1314,
     1314, 1314,    0,    0, 1314,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1314, 1314,    0,    0,    0, 1314,
        0, 1314, 1314, 1314,    0,    0,    0,    0, 1314, 1315,
        0, 1315, 1315, 1315,    0,    0,    0,    0, 1315, 1316,

     1316, 1316, 1316,    0,    0, 1316,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1316, 1316,    0,    0,    0,
     1316,    0, 1316, 1316, 1316,    0,    0,    0,    0, 1316,
     1317, 1317, 1317, 1317,    0,    0, 1317,    0,    0,    0,
        0,    0,    0,    0, 1317,    0,    0, 1317,    0,    0,
        0, 1317,    0, 1317, 1317, 1317,    0,    0,    0, 1317,
     1317, 1318, 1318, 1318, 1318,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1318,    0, 1318, 1318,    0,
        0,    0, 1318,    0, 1318, 1318, 1318,    0,    0,    0,
        0, 1318, 1319, 1319, 1319, 1319,    0,    0, 1319,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1319,    0, 1319, 1319, 1319,    0,    0,
        0,    0, 1319, 1320,    0,    0,    0,    0, 1320,    0,
     1320, 1320, 1320,    0,    0,    0,    0, 1320, 1321,    0,
     1321,    0,    0,    0,    0, 1321,    0, 1321, 1321, 1321,
        0,    0,    0,    0, 1321, 1322,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1322,    0, 1322, 1322, 1322,    0,    0,    0,    0, 1322,
     1323, 1323,    0, 1323,    0,    0,    0,    0, 1323,    0,
     1323, 1323, 1323,    0,    0,    0,    0, 1323, 1324, 1324,

        0, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,    0,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324,    0, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1325,    0,    0, 1325,    0,    0,    0,    0, 1325,    0,
     1325, 1325, 1325,    0,    0,    0,    0, 1325, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,    0,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1327, 1327,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,

     1327,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1328,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1328,    0, 1328,
     1328, 1328,    0,    0,    0,    0, 1328, 1329,    0,    0,
     1329,    0,    0,    0,    0, 1329,    0, 1329, 1329, 1329,
        0,    0,    0,    0, 1329, 1330, 1330,    0, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1331, 1331,    0,
     1331,    0, 1331, 1331, 1331, 1331, 1331, 1331,    0, 1331,

     1331, 1331, 1331,    0, 1331, 1331, 1331, 1331,    0, 1331,
        0, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332,
        0,    0, 1332,    0,    0,    0,    0, 1332,    0,    0,
        0,    0, 1332, 1332,    0, 1332,    0,    0,    0,    0,
     1332,    0, 1332, 1332, 1332, 1333, 1333,    0, 1333,    0,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333,    0, 1333,    0, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1334, 1334,    0,
     1334,    0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,    0, 1334,

        0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1335,
        0,    0, 1335,    0,    0,    0,    0, 1335,    0, 1335,
     1335, 1335,    0,    0,    0,    0, 1335, 1336, 1336,    0,
     1336, 1336, 1336, 1336, 1336, 1336,    0,    0, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,    0, 1336,
        0, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1337,
        0, 1337, 1337,    0,    0,    0, 1337,    0, 1337, 1337,
     1337,    0,    0,    0,    0, 1337, 1338,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1338,    0, 1338, 1338, 1338,    0,    0,    0,    0,

     1338, 1339,    0, 1339, 1339,    0,    0,    0, 1339,    0,
     1339, 1339, 1339,    0,    0,    0,    0, 1339, 1340,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1340,    0, 1340, 1340, 1340,    0,    0,
        0,    0, 1340, 1341, 1341,    0, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341,    0, 1341,    0, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1342,    0,    0, 1342,    0,
        0,    0,    0, 1342,    0, 1342, 1342, 1342,    0,    0,
        0,    0, 1342, 1343, 1343,    0, 1343, 1343, 1343, 1343,

     1343, 1343, 1343, 1343, 1343, 1343, 1343,    0, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343,    0, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1344, 1344,    0, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344,    0, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344,    0, 1344,    0, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1346,    0, 1346,
     1346, 1346, 1346, 1346,    0,    0,    0, 1346,    0, 1346,
     1346, 1346,    0,    0,    0,    0, 1346, 1347,    0,    0,
        0,    0, 1347,    0, 1347, 1347, 1347,    0,    0,    0,
        0, 1347, 1348, 1348,    0, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348,    0, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349,    0,    0, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350,    0,    0,
        0, 1350,    0, 1350, 1350, 1350,    0,    0,    0,    0,
     1350, 1351, 1351,    0, 1351, 1351, 1351, 1351,    0, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,

     1351, 1351, 1351, 1352, 1352,    0, 1352,    0,    0,    0,
        0, 1352,    0, 1352, 1352, 1352, 1353,    0, 1353, 1353,
        0, 1353,    0,    0,    0, 1353, 1353,    0, 1353, 1353,
     1353, 1354,    0,    0, 1354,    0, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1355, 1355,    0, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1356,    0,    0, 1356,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1356,    0, 1356, 1356,
     1356, 1358,    0,    0, 1358,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1358,    0, 1358, 1358, 1358, 1359, 1359,    0,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359,    0, 1359, 1359, 1360,
        0,    0,    0,    0,    0,    0,    0, 1360,    0, 1360,
     1360, 1360, 1362,    0,    0, 1362,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1362, 1362, 1362, 1362, 1362, 1363,    0,
        0,    0,    0,    0, 1363,    0, 1363, 1363, 1363, 1363,
     1363,    0,    0, 1363, 1363, 1363, 1363, 1363, 1363,    0,
        0,    0,    0, 1363, 1364,    0,    0,    0,    0,    0,
     1364,    0, 1364, 1364, 1364, 1364, 1364,    0,    0, 1364,
     1364, 1364, 1364, 1364, 1364,    0,    0,    0,    0, 1364,
     1365,    0, 1365, 1365, 1365,    0,    0,    0,    0, 1365,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1367,    0, 1367,    0,    0, 1367,    0, 1367,
     1367, 1367,    0,    0,    0,    0, 1367, 1368,    0,    0,
        0,    0,    0, 1368,    0, 1368, 1368, 1368, 1368, 1368,
        0,    0, 1368, 1368, 1368, 1368, 1368, 1368,    0,    0,
        0,    0, 1368, 1369,    0,    0,    0,    0,    0, 1369,
        0, 1369, 1369, 1369, 1369, 1369,    0,    0, 1369, 1369,
     1369, 1369, 1369, 1369,    0,    0,    0,    0, 1369, 1370,
     1370,    0, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,

     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1371, 1371,    0,    0,    0,    0,    0, 1371,    0,
     1371, 1371, 1371, 1371, 1371,    0, 1371, 1371, 1371, 1371,
     1371, 1371, 1371,    0,    0,    0,    0, 1371, 1372, 1372,
        0,    0,    0,    0,    0, 1372,    0, 1372, 1372, 1372,
     1372, 1372,    0, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
        0,    0,    0,    0, 1372, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1374,    0,    0,

     1374,    0,    0,    0,    0, 1374,    0,    0,    0,    0,
        0,    0,    0, 1374,    0,    0,    0,    0, 1374,    0,
     1374, 1374, 1374,    0,    0,    0,    0, 1374, 1375,    0,
        0,    0,    0,    0, 1375,    0, 1375, 1375, 1375, 1375,
     1375,    0,    0, 1375, 1375, 1375, 1375, 1375, 1375,    0,
        0,    0,    0, 1375, 1376,    0,    0,    0,    0,    0,
     1376,    0, 1376, 1376, 1376, 1376, 1376,    0,    0, 1376,
     1376, 1376, 1376, 1376, 1376,    0,    0,    0,    0, 1376,
     1377, 1377, 1377, 1377,    0,    0, 1377,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1377, 1377,    0,    0,

        0, 1377,    0, 1377, 1377, 1377,    0,    0,    0,    0,
     1377, 1378, 1378, 1378, 1378,    0,    0, 1378,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1378,    0,
        0,    0, 1378,    0, 1378, 1378, 1378,    0,    0,    0,
        0, 1378, 1379, 1379, 1379, 1379,    0,    0, 1379,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1379, 1379,
        0,    0,    0, 1379,    0, 1379, 1379, 1379,    0,    0,
        0,    0, 1379, 1380,    0,    0,    0,    0, 1380,    0,
     1380, 1380, 1380,    0,    0,    0,    0, 1380, 1381,    0,
     1381, 1381, 1381,    0,    0,    0,    0, 1381, 1382,    0,

     1382,    0,    0,    0,    0, 1382,    0, 1382, 1382, 1382,
        0,    0,    0,    0, 1382, 1383,    0, 1383, 1383, 1383,
        0,    0,    0,    0, 1383, 1384,    0,    0,    0,    0,
     1384,    0, 1384, 1384, 1384,    0,    0,    0,    0, 1384,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385,    0, 1385, 1385,
     1385, 1385,    0, 1385,    0,    0, 1385, 1385, 1385, 1385,
     1385, 1385, 1386,    0, 1386, 1386, 1386,    0,    0,    0,
        0, 1386, 1387,    0, 1387, 1387, 1387,    0,    0,    0,
        0, 1387, 1389,    0, 1389, 1389, 1389, 1389, 1389,    0,

        0,    0, 1389,    0, 1389, 1389, 1389,    0,    0,    0,
        0, 1389, 1390, 1390,    0, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1391,    0,    0, 1391,    0,    0,
        0,    0, 1391,    0, 1391, 1391, 1391, 1392,    0, 1392,
        0, 1392, 1392,    0, 1392,    0,    0,    0, 1392, 1392,
        0, 1392, 1392, 1392, 1393, 1393,    0, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1395,    0,    0, 1395,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1395,    0, 1395,
     1395, 1395, 1396, 1396,    0, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1398,
        0,    0, 1398,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1398, 1398, 1398, 1398, 1398, 1399, 1399,    0, 1399,    0,

        0,    0,    0,    0,    0,    0, 1399,    0, 1399, 1399,
        0, 1399, 1399,    0,    0, 1399, 1399,    0, 1399, 1399,
     1399,    0, 1399, 1400,    0,    0,    0,    0,    0, 1400,
        0, 1400, 1400, 1400, 1400, 1400,    0,    0, 1400, 1400,
     1400, 1400, 1400, 1400,    0,    0,    0,    0, 1400, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1402,    0,    0,    0,    0,    0, 1402,    0, 1402,
     1402, 1402, 1402, 1402,    0,    0, 1402, 1402, 1402, 1402,

     1402, 1402,    0,    0,    0,    0, 1402, 1403, 1403,    0,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1404,
     1404,    0,    0,    0,    0,    0, 1404,    0, 1404, 1404,
     1404, 1404, 1404,    0, 1404, 1404, 1404, 1404, 1404, 1404,
     1404,    0,    0,    0,    0, 1404, 1405,    0,    0,    0,
        0,    0, 1405,    0, 1405, 1405, 1405, 1405, 1405,    0,
        0, 1405, 1405, 1405, 1405, 1405, 1405,    0,    0,    0,
        0, 1405, 1406,    0, 1406, 1406, 1406,    0,    0,    0,

        0, 1406, 1407, 1407, 1407, 1407,    0,    0, 1407,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1407, 1407,
        0,    0,    0, 1407,    0, 1407, 1407, 1407,    0,    0,
        0,    0, 1407, 1408, 1408, 1408, 1408,    0,    0, 1408,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1408,    0,    0,    0, 1408,    0, 1408, 1408, 1408,    0,
        0,    0,    0, 1408, 1409,    0, 1409,    0,    0,    0,
        0, 1409,    0, 1409, 1409, 1409,    0,    0,    0,    0,
     1409, 1410,    0,    0,    0,    0, 1410,    0, 1410, 1410,
     1410,    0,    0,    0,    0, 1410, 1411, 1411,    0, 1411,

        0,    0,    0,    0, 1411,    0, 1411, 1411, 1411, 1412,
     1412,    0, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413,    0, 1413,    0,    0,    0, 1413, 1413,
     1413, 1413, 1413, 1414, 1414, 1414, 1414,    0,    0, 1414,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1414,
     1414,    0,    0,    0, 1414,    0, 1414, 1414, 1414,    0,

        0,    0,    0, 1414, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415,    0, 1415, 1415, 1415, 1415,    0, 1415,    0, 1415,
        0, 1415, 1415, 1415, 1415, 1415, 1416, 1416,    0, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417,    0, 1417, 1417, 1417, 1417,
        0, 1417,    0,    0,    0, 1417, 1417, 1417, 1417, 1417,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418,    0, 1418, 1418,
     1418, 1418,    0, 1418,    0,    0,    0, 1418, 1418, 1418,
     1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,    0,
     1419, 1419, 1419, 1419,    0, 1419,    0,    0,    0, 1419,
     1419, 1419, 1419, 1419, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420,    0, 1420, 1420, 1420, 1420,    0, 1420,    0,    0,
        0, 1420, 1420, 1420, 1420, 1420, 1421, 1421,    0, 1421,

     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 18 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"
#include "condparser.h"
#include "formula.h"

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleHideCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleHideCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);
static bool handleCopyBrief(const QCString &);
static bool handleCopyDetails(const QCString &);
static bool handleParBlock(const QCString &);
static bool handleEndParBlock(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "parblock",        &handleParBlock,         TRUE  },
  { "endparblock",     &handleEndParBlock,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             FALSE },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE  },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "docbookonly",     &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "startuml",        &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "hidecallgraph",   &handleHideCallgraph,    FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "hidecallergraph", &handleHideCallergraph,  FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       &handleCopyBrief,        FALSE },
  { "copydetails",     &handleCopyDetails,      TRUE  },
  { "copyright",       0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "latexinclude",    0,                       FALSE },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  err("DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
bool inInternalDocs = FALSE;
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static QCString         g_spaceBeforeCmd;
static QCString         g_spaceBeforeIf;
static QCString         g_copyDocArg;

static QCString         g_guardExpr;
static int              g_roundCount;

static bool             g_insideParBlock;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
  g_insideParBlock = FALSE;
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (qstrcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    if (Doxygen::markdownSupport)
    {
      item->text += processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text += outputXRef;
    }
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    if (Doxygen::markdownSupport)
    {
      item->text = processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text = outputXRef;
    }
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si = Doxygen::sectionDict->find(anchorLabel);
    if (si)
    {
      if (si->lineNr != -1)
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",anchorLabel,si->fileName.data(),si->lineNr);
      }
      else
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s)",anchorLabel,si->fileName.data());
      }
    }
    else
    {
      si=new SectionInfo(listName,yyLineNr,anchorLabel,
                         g_sectionTitle,SectionInfo::Anchor,
                         g_sectionLevel);
      Doxygen::sectionDict->append(anchorLabel,si);
      docEntry->anchors->append(si);
    }
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict->find(fText))==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList->append(f);
    Doxygen::formulaDict->insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict->insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  SectionInfo *si = Doxygen::sectionDict->find(g_sectionLabel);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",g_sectionLabel.data(),si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s)",g_sectionLabel.data(),si->fileName.data());
    }
  }
  else
  {
    // create a new section element
    g_sectionTitle+=commentscanYYtext;
    g_sectionTitle=g_sectionTitle.stripWhiteSpace();
    si = new SectionInfo(yyFileName,yyLineNr,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

    // add section to this entry
    current->anchors->append(si);

    // add section to the global dictionary
    Doxygen::sectionDict->append(g_sectionLabel,si);
  }
}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentscanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}


static void addAnchor(const char *anchor)
{
  SectionInfo *si = Doxygen::sectionDict->find(anchor);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s, line %d)",anchor,si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s)",anchor,si->fileName.data());
    }
  }
  else
  {
    si = new SectionInfo(yyFileName,yyLineNr,anchor,0,SectionInfo::Anchor,0);
    Doxygen::sectionDict->append(anchor,si);
    current->anchors->append(si);
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentscanYYtext);
  }
}

static void handleGuard(const QCString &expr);
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */









































#line 4179 "/space/projects/slicepp/doxygen/build/generated_src/commentscan.cpp"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1001 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4430 "/space/projects/slicepp/doxygen/build/generated_src/commentscan.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1189 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1188 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1020 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1023 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1026 "commentscan.l"
{ // mail address
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1029 "commentscan.l"
{ // quoted text
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1032 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 1035 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 1052 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1057 "commentscan.l"
{ // HTML command that ends a brief description
					  if (current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(OutputDoc);
                                          }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1065 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1069 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1073 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentscanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1077 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1080 "commentscan.l"
{
                                          QCString tag=commentscanYYtext;
                                          int s=tag.find("id=");
                                          if (s!=-1) // command has id attribute
                                          {
                                            char c=tag[s+3];
                                            if (c=='\'' || c=='"') // valid start
                                            {
                                              int e=tag.find(c,s+4);
                                              if (e!=-1) // found matching end
                                              {
                                                QCString id=tag.mid(s+4,e-s-4); // extract id
                                                addAnchor(id);
                                              }
                                            }
                                          }
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1098 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1102 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1106 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1110 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1113 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
                                          if (!inInternalDocs)
  					    warn(yyFileName,yyLineNr,
                                               "found \\endinternal without matching \\internal"
                                              );
                                          inInternalDocs = FALSE;
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1121 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentscanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
                                            int i=0;
                                            while (commentscanYYtext[i]==' ' || commentscanYYtext[i]=='\t') i++;
					    g_spaceBeforeCmd = QCString(commentscanYYtext).left(i);
					    if (cmdPtr->endsBrief && inContext!=OutputXRef) 
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            //if (i>0) addOutput(QCString(commentscanYYtext).left(i)); // removed for bug 689341
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
					      inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentscanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentscanYYtext);
					  }
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1167 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1170 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentscanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      qstricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1178 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentscanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1190 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1195 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1200 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1204 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + strlen(commentscanYYtext);
#else
				          inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + strlen(commentscanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1217 "commentscan.l"
{ // escaped character
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1220 "commentscan.l"
{ // normal word
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1223 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentscanYYtext); 
					}
	YY_BREAK
case 30:
#line 1227 "commentscan.l"
case 31:
YY_RULE_SETUP
#line 1227 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentscanYYtext); 
                                          }
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1242 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentscanYYtext); 
  					}
	YY_BREAK
case 33:
/* rule 33 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1250 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentscanYYtext); 
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1253 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1256 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1259 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1262 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1265 "commentscan.l"
{ // numbered item
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1268 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1271 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentscanYYtext[0]);
  					  addOutput(commentscanYYtext[2]);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1275 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1278 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 43:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1281 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1284 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    if (!g_insideParBlock) setOutput(OutputDoc);
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					  }
					  else if (inContext!=OutputBrief)
					  {
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 1315 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentscanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1323 "commentscan.l"
{ // newline
  					  addOutput(*commentscanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1327 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 48:
YY_RULE_SETUP
#line 1334 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1335 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1338 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1340 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 52:
YY_RULE_SETUP
#line 1345 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1350 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1355 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 1361 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentscanYYtext; 
 					} 
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1364 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentscanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1369 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentscanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1375 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1379 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1383 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1391 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1396 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1400 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1404 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1413 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 66:
YY_RULE_SETUP
#line 1418 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1422 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1426 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1435 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1440 "commentscan.l"
{ 
  					  current->name = substitute(removeRedundantWhiteSpace(commentscanYYtext),".","::");
					  BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1444 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1453 "commentscan.l"
{
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1457 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 1461 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1470 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1473 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentscanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1477 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1481 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1486 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1489 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentscanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1493 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1497 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1501 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 84:
YY_RULE_SETUP
#line 1506 "commentscan.l"
{ // group name
  					  current->name = commentscanYYtext;
					  //lastDefGroup.groupname = commentscanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1518 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1522 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1531 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1535 "commentscan.l"
{ // title (stored in type)
					  current->type += commentscanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1539 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 90:
YY_RULE_SETUP
#line 1556 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1560 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1563 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\page."
                                              );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1572 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1574 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentscanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1583 "commentscan.l"
{ // no file name specfied
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1588 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1592 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1595 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 99:
YY_RULE_SETUP
#line 1600 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentscanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1605 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1609 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "Missing first argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1618 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1621 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentscanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1625 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 1629 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing second argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1638 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1641 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentscanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1646 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1650 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing third argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1659 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 111:
YY_RULE_SETUP
#line 1665 "commentscan.l"
{ // argument
  					  current->relates = commentscanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentscanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1673 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1677 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1685 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1691 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1696 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1700 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 118:
YY_RULE_SETUP
#line 1706 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentscanYYtext;
                                          addOutput(commentscanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1712 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\section command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1720 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1726 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 122:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1731 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1736 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1740 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1744 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentscanYYtext[1];
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1748 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentscanYYtext[1];
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1752 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 128:
YY_RULE_SETUP
#line 1759 "commentscan.l"
{ // first argument
                                          addOutput(commentscanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentscanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1766 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\subpage command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1774 "commentscan.l"
{ // no title, end command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1778 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1782 "commentscan.l"
{ // no title, end of command
  					  unput(*commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 133:
YY_RULE_SETUP
#line 1789 "commentscan.l"
{ // found argument
                                          addAnchor(commentscanYYtext);
					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1794 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\anchor command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1802 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1812 "commentscan.l"
{ // possible ends
  					  addOutput(commentscanYYtext);
					  if (&commentscanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1819 "commentscan.l"
{
  					  addOutput(commentscanYYtext);
					  if (blockName=="startuml") // found end of the block
					  {
  					    BEGIN(Comment);
					  }
                                        }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1826 "commentscan.l"
{ // some word
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1829 "commentscan.l"
{ // new line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1833 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1837 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentscanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1846 "commentscan.l"
{
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1849 "commentscan.l"
{
                                          QCString endTag = "@end"+blockName;
                                          if (blockName=="startuml") endTag="enduml";
                                          warn(yyFileName,yyLineNr,
	                                    "reached end of comment while inside a @%s block; check for missing @%s tag!",
	                                    blockName.data(),endTag.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 143:
YY_RULE_SETUP
#line 1861 "commentscan.l"
{
                                          g_guardExpr=commentscanYYtext;
                                          g_roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 1866 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                        }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1869 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount++;
                                        }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1873 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount--;
                                          if (g_roundCount==0)
                                          {
                                            handleGuard(g_guardExpr);
                                          }
                                        }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1881 "commentscan.l"
{
					  warn(yyFileName,yyLineNr,
						"invalid expression '%s' for guard",g_guardExpr.data());
                                          unput(*commentscanYYtext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1887 "commentscan.l"
{ // parameter of if/ifnot guard
                                          handleGuard(commentscanYYtext);
  					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1890 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1896 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1900 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1903 "commentscan.l"
{
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1907 "commentscan.l"
{
  					  if (!g_spaceBeforeIf.isEmpty()) // needed for 665313 in combation with bug620924
					  {
					    addOutput(g_spaceBeforeIf);
					  }
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1915 "commentscan.l"
{
  					  unput(*commentscanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 155:
/* rule 155 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1922 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1926 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1930 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @endif without matching start command");
					  }
					  else
					  {
					    GuardedSection *s = guards.pop();
                                            bool parentVisible = s->parentVisible();
                                            delete s;
                                            if (parentVisible)
                                            {
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
                                            }
					  }
  					}
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1948 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1965 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
                                              guardType=Guard_If;
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1981 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1985 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1987 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1993 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1997 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 165:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2000 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 166:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2003 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2011 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2018 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2025 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2032 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2039 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
					  BEGIN(Comment);
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2043 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2045 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 2051 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 2056 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2061 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentscanYYtext;
					  current->name+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 177:
YY_RULE_SETUP
#line 2068 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentscanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 2074 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 2085 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2089 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 2095 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentscanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 2104 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2108 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentscanYYtext;
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2111 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2115 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2119 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 2127 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					    addOutput('\n');
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 2141 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2145 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 190:
YY_RULE_SETUP
#line 2151 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 2157 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\inherit command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2165 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 193:
YY_RULE_SETUP
#line 2174 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 2180 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\extends or \\implements command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2188 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 196:
YY_RULE_SETUP
#line 2193 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentscanYYtext[2];
				     if (langId.isEmpty() ||
					 qstricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2201 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 2203 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentscanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2206 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 200:
YY_RULE_SETUP
#line 2211 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentscanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 2216 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\cite command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2224 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2233 "commentscan.l"
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 2234 "commentscan.l"
{
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2243 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2247 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2253 "commentscan.l"
ECHO;
	YY_BREAK
#line 6665 "/space/projects/slicepp/doxygen/build/generated_src/commentscan.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1189 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1189 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1188);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2253 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleParBlock(const QCString &)
{
  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\parblock command while already in a parblock!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@parblock ");
  g_insideParBlock = TRUE;
  return FALSE;
}

static bool handleEndParBlock(const QCString &)
{
  if (!g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\endparblock command without matching \\parblock!");
  }
  addOutput("@endparblock");
  setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
  g_insideParBlock = FALSE;
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"found \\subpage command in a comment block that is not marked as a page!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallgraph(const QCString &)
{
  current->callGraph = FALSE; // OFF
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallergraph(const QCString &)
{
  current->callerGraph = FALSE; // OFF
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
    inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyBrief(const QCString &)
{
  if (current->brief.isEmpty() && current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(OutputBrief);
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  return FALSE;
}

static bool handleCopyDetails(const QCString &)
{
  setOutput(OutputDoc);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copydetails ");
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd.resize(0);
  g_spaceBeforeIf.resize(0);

  printlex(commentscanYY_flex_debug, TRUE, __FILE__, fileName ? fileName.data(): NULL);
  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",qPrint(fileName),lineNr,qPrint(comment)
              );
  
  commentscanYYrestart( commentscanYYin );
  BEGIN( Comment );
  commentscanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"Documentation block ended while inside a \\parblock. Missing \\endparblock");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,lineNr,current,current->brief);
    current->doc        = processMarkdown(fileName,lineNr,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,lineNr,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,qPrint(current->brief),
               current->docLine,qPrint(current->doc),
               current->inbodyLine,qPrint(current->inbodyDocs)
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d newEntryNeeded=%d\n",
  //  position,parseMore,newEntryNeeded);

  printlex(commentscanYY_flex_debug, FALSE, __FILE__, fileName ? fileName.data(): NULL);
  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	qstricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return (int)di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    if (!foundInline) e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}

static void handleGuard(const QCString &expr)
{
  CondParser prs;
  bool sectionEnabled=prs.parse(yyFileName,yyLineNr,expr.stripWhiteSpace());
  bool parentEnabled = TRUE;
  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && guardType==Guard_If) ||  
        (!sectionEnabled && guardType==Guard_IfNot)
       ) // section is visible
    {
      guards.push(new GuardedSection(TRUE,TRUE));
      enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (guardType!=Guard_Skip)
      {
        guards.push(new GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    guards.push(new GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}



#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentscanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


